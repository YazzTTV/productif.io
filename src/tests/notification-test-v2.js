const { MongoClient } = require('mongodb');
const whatsappService = require('../services/whatsappService');
const NotificationScheduler = require('../services/NotificationScheduler');

async function testNotificationSystem() {
    const client = new MongoClient(process.env.MONGODB_URI);

    try {
        console.log('üöÄ Test du syst√®me de notifications v2...');

        await client.connect();
        console.log('‚úÖ Connect√© √† MongoDB');

        const db = client.db('plannificateur');

        // 1. R√©cup√©rer les pr√©f√©rences de notification existantes
        console.log('üîç Recherche des pr√©f√©rences de notification...');
        const userPreferences = await db.collection('UserNotificationPreference').findOne({
            whatsappEnabled: true,
            whatsappNumber: { $ne: null }
        });

        if (!userPreferences) {
            throw new Error('Aucune pr√©f√©rence de notification WhatsApp trouv√©e. Veuillez d\'abord configurer un num√©ro WhatsApp.');
        }

        console.log('‚úÖ Pr√©f√©rences trouv√©es pour l\'utilisateur:', userPreferences.userId);
        console.log('üì± Num√©ro WhatsApp:', userPreferences.whatsappNumber);

        // 2. Initialiser le planificateur avec le service WhatsApp existant
        console.log('\n‚öôÔ∏è Cr√©ation du planificateur...');
        const scheduler = new NotificationScheduler(whatsappService);

        // 3. Cr√©er une notification de test
        const testMessage = {
            type: 'TEST',
            content: 'üîî Ceci est une notification de test v2 de production',
            scheduledFor: new Date(Date.now() + 60000), // Dans 1 minute
            status: 'pending'
        };

        console.log('\nüìù Cr√©ation d\'une notification de test...');
        const notification = await db.collection('NotificationHistory').insertOne({
            userId: userPreferences.userId,
            type: testMessage.type,
            content: testMessage.content,
            scheduledFor: testMessage.scheduledFor,
            status: testMessage.status
        });

        console.log('‚úÖ Notification cr√©√©e:', notification.insertedId);
        console.log('‚è∞ Planifi√©e pour:', testMessage.scheduledFor);

        // 4. D√©marrer le planificateur
        console.log('\n‚ö° D√©marrage du planificateur...');
        scheduler.start();

        // 5. Attendre 2 minutes
        console.log('‚è≥ Attente de 2 minutes...');
        await new Promise(resolve => setTimeout(resolve, 2 * 60 * 1000));

        // 6. V√©rifier le statut
        const updatedNotification = await db.collection('NotificationHistory').findOne({
            _id: notification.insertedId
        });

        console.log('\nüìä R√©sultat:');
        console.log('- Status:', updatedNotification.status);
        console.log('- Envoy√©e le:', updatedNotification.sentAt);
        if (updatedNotification.status === 'failed') {
            console.log('- Erreur:', updatedNotification.error);
        }

        // 7. Arr√™ter le planificateur
        scheduler.stop();
        console.log('\n‚úÖ Test termin√© !');
        
        // 8. Nettoyage
        try {
            await db.collection('NotificationHistory').deleteOne({
                _id: notification.insertedId
            });
        } catch (error) {
            console.log('Note: Impossible de supprimer la notification de test');
        }
        
        process.exit(0);
    } catch (error) {
        console.error('\n‚ùå Erreur:', error);
        console.error('Stack:', error.stack);
        process.exit(1);
    } finally {
        await client.close();
    }
}

testNotificationSystem(); 