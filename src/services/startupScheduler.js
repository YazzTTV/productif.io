const cron = require('node-cron');
const { MongoClient } = require('mongodb');

class StartupScheduler {
    constructor() {
        this.client = new MongoClient(process.env.MONGODB_URI);
        this.jobs = new Map();
    }

    async start() {
        try {
            console.log('üöÄ D√©marrage du planificateur de d√©marrage...');

            // Connexion √† MongoDB
            await this.client.connect();
            console.log('‚úÖ Connect√© √† MongoDB');

            // Planifier les t√¢ches
            this.scheduleJobs();

            console.log('‚ú® Planificateur de d√©marrage d√©marr√© avec succ√®s !');
        } catch (error) {
            console.error('‚ùå Erreur lors du d√©marrage du planificateur:', error);
            throw error;
        }
    }

    scheduleJobs() {
        // Planifier les rappels matinaux tous les jours √† 7h
        this.jobs.set('morningReminders', cron.schedule('0 7 * * *', async () => {
            try {
                await this.scheduleMorningReminders();
            } catch (error) {
                console.error('Erreur lors de la planification des rappels matinaux:', error);
            }
        }));

        // Planifier les rappels de t√¢ches toutes les heures
        this.jobs.set('taskReminders', cron.schedule('0 * * * *', async () => {
            try {
                await this.scheduleTaskReminders();
            } catch (error) {
                console.error('Erreur lors de la planification des rappels de t√¢ches:', error);
            }
        }));
    }

    async stop() {
        try {
            // Arr√™ter tous les jobs
            for (const [name, job] of this.jobs) {
                console.log(`Arr√™t du job ${name}...`);
                job.stop();
            }
            this.jobs.clear();

            // Fermer la connexion MongoDB
            await this.client.close();
            console.log('‚úÖ Planificateur de d√©marrage arr√™t√© avec succ√®s');
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'arr√™t du planificateur:', error);
            throw error;
        }
    }
}

module.exports = new StartupScheduler(); 