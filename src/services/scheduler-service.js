const whatsappService = require('./whatsappService');
const NotificationScheduler = require('./NotificationScheduler');
const express = require('express');

const app = express();

// Variable globale pour le planificateur
let scheduler = null;

async function startSchedulerService() {
    try {
        console.log('üöÄ D√©marrage du service de planification...');

        // 1. Configurer le serveur Express pour le healthcheck
        app.use(express.json());

        // Route de sant√© pour Railway
        app.get('/health', (req, res) => {
            res.json({ 
                status: 'healthy', 
                service: 'scheduler',
                schedulerActive: scheduler !== null 
            });
        });

        // 2. D√©marrer le planificateur
        console.log('‚öôÔ∏è Initialisation du planificateur...');
        scheduler = new NotificationScheduler(whatsappService);
        scheduler.start();
        console.log('‚úÖ Planificateur d√©marr√©');

        // 3. D√©marrer le serveur pour le healthcheck
        const port = process.env.PORT || 3001; // Port diff√©rent de l'agent WhatsApp
        app.listen(port, () => {
            console.log(`üåê Serveur de monitoring d√©marr√© sur le port ${port}`);
        });

        // 4. G√©rer l'arr√™t gracieux
        process.on('SIGTERM', async () => {
            console.log('\nüì¥ Signal d\'arr√™t re√ßu...');
            await stopSchedulerService();
            process.exit(0);
        });

        process.on('SIGINT', async () => {
            console.log('\nüì¥ Signal d\'interruption re√ßu...');
            await stopSchedulerService();
            process.exit(0);
        });

        console.log('‚ú® Service de planification d√©marr√© et fonctionnel !');
    } catch (error) {
        console.error('‚ùå Erreur lors du d√©marrage du service:', error);
        console.error('Stack:', error.stack);
        process.exit(1);
    }
}

async function stopSchedulerService() {
    try {
        if (scheduler) {
            console.log('‚èπÔ∏è Arr√™t du planificateur...');
            scheduler.stop();
            scheduler = null;
        }
        console.log('‚úÖ Service arr√™t√© avec succ√®s');
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'arr√™t du service:', error);
    }
}

// D√©marrer le service
startSchedulerService(); 