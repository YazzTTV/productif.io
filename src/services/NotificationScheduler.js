import cron from 'node-cron';
import { PrismaClient } from '@prisma/client';
import NotificationService from './NotificationService.js';
import NotificationLogger from './NotificationLogger.js';
import EventManager from '../../lib/EventManager.js';
import ReactiveSchedulerManager from '../../lib/ReactiveSchedulerManager.js';

class NotificationScheduler {
    constructor(whatsappService, prisma) {
        this.jobs = new Map();
        this.prisma = prisma || new PrismaClient();
        this.notificationService = NotificationService;
        this.whatsappService = whatsappService;
        this.eventManager = EventManager.getInstance();
        this.isStarted = false;
        
        // Initialiser le syst√®me r√©actif
        this.reactiveManager = new ReactiveSchedulerManager(this, this.prisma);
        
        // Configurer les listeners d'√©v√©nements
        this.setupEventListeners();
    }

    setupEventListeners() {
        // √âcouter les mises √† jour de pr√©f√©rences
        this.eventManager.onPreferencesUpdate(this.handlePreferencesUpdate.bind(this));
        
        // √âcouter les suppressions d'utilisateurs
        this.eventManager.onUserDeleted(this.handleUserDeleted.bind(this));
        
        // √âcouter les red√©marrages du planificateur
        this.eventManager.onSchedulerRestart(this.handleSchedulerRestart.bind(this));
        
        console.log('üéß EventListeners configur√©s pour le planificateur');
        console.log('üì° Le scheduler √©coute maintenant les √©v√©nements en temps r√©el :');
        console.log('   ‚Ä¢ PREFERENCES_UPDATED');
        console.log('   ‚Ä¢ USER_DELETED');
        console.log('   ‚Ä¢ SCHEDULER_RESTART');
        console.log('');
    }

    /**
     * Gestionnaire des mises √† jour de pr√©f√©rences
     */
    async handlePreferencesUpdate(event) {
        console.log('\n' + '='.repeat(80));
        console.log('üî• √âV√âNEMENT RE√áU : MISE √Ä JOUR DES PR√âF√âRENCES');
        console.log('='.repeat(80));
        console.log(`üë§ Utilisateur: ${event.userId}`);
        console.log(`‚è∞ Timestamp: ${event.timestamp}`);
        console.log('üìã Changements d√©tect√©s:');
        
        const { userId, oldPreferences, newPreferences } = event;
        
        // Afficher les changements
        if (oldPreferences.morningTime !== newPreferences.morningTime) {
            console.log(`   üåÖ Matin: ${oldPreferences.morningTime} ‚Üí ${newPreferences.morningTime}`);
        }
        if (oldPreferences.noonTime !== newPreferences.noonTime) {
            console.log(`   ‚òÄÔ∏è Midi: ${oldPreferences.noonTime} ‚Üí ${newPreferences.noonTime}`);
        }
        if (oldPreferences.afternoonTime !== newPreferences.afternoonTime) {
            console.log(`   üå§Ô∏è Apr√®s-midi: ${oldPreferences.afternoonTime} ‚Üí ${newPreferences.afternoonTime}`);
        }
        if (oldPreferences.eveningTime !== newPreferences.eveningTime) {
            console.log(`   üåÜ Soir: ${oldPreferences.eveningTime} ‚Üí ${newPreferences.eveningTime}`);
        }
        if (oldPreferences.nightTime !== newPreferences.nightTime) {
            console.log(`   üåô Nuit: ${oldPreferences.nightTime} ‚Üí ${newPreferences.nightTime}`);
        }
        if (oldPreferences.isEnabled !== newPreferences.isEnabled) {
            console.log(`   üîî Notifications: ${oldPreferences.isEnabled ? '‚úÖ' : '‚ùå'} ‚Üí ${newPreferences.isEnabled ? '‚úÖ' : '‚ùå'}`);
        }
        
        try {
            console.log('\nüßπ √âTAPE 0: Nettoyage des notifications en attente...');
            await this.cleanupPendingNotifications(userId);
            
            console.log('\nüõë √âTAPE 1: Arr√™t des anciennes t√¢ches...');
            await this.stopUserTasks(userId);
            
            // V√©rifier si les notifications sont activ√©es
            if (!newPreferences.isEnabled) {
                console.log('‚ùå Notifications d√©sactiv√©es - aucune nouvelle t√¢che planifi√©e');
                console.log('='.repeat(80));
                return;
            }
            
            console.log('üöÄ √âTAPE 2: Planification des nouvelles t√¢ches...');
            await this.scheduleUserNotifications(userId, newPreferences);
            
            console.log('\n‚úÖ MISE √Ä JOUR TERMIN√âE AVEC SUCC√àS !');
            console.log(`üéØ Utilisateur ${userId} maintenant √† jour`);
            console.log('='.repeat(80));
        } catch (error) {
            console.log('\n‚ùå ERREUR LORS DE LA MISE √Ä JOUR !');
            console.log('='.repeat(80));
            NotificationLogger.logError(`Mise √† jour des pr√©f√©rences pour ${event.userId}`, error);
        }
    }

    /**
     * Nettoie les notifications en attente pour un utilisateur
     */
    async cleanupPendingNotifications(userId) {
        try {
            console.log(`   üîç Recherche des notifications en attente pour ${userId}...`);
            
            const pendingNotifications = await this.prisma.notificationHistory.findMany({
                where: {
                    userId: userId,
                    status: 'pending'
                }
            });
            
            if (pendingNotifications.length === 0) {
                console.log(`   ‚ÑπÔ∏è Aucune notification en attente trouv√©e`);
                return;
            }
            
            console.log(`   üìã ${pendingNotifications.length} notifications en attente trouv√©es`);
            
            // Supprimer les notifications en attente
            const result = await this.prisma.notificationHistory.deleteMany({
                where: {
                    userId: userId,
                    status: 'pending'
                }
            });
            
            console.log(`   üóëÔ∏è ${result.count} notifications en attente supprim√©es`);
            console.log(`   ‚úÖ Nettoyage termin√© pour ${userId}`);
        } catch (error) {
            console.log(`   ‚ùå Erreur lors du nettoyage:`, error.message);
            NotificationLogger.logError(`Nettoyage des notifications pour ${userId}`, error);
        }
    }

    /**
     * Gestionnaire de suppression d'utilisateur
     */
    async handleUserDeleted(data) {
        console.log('\n' + '='.repeat(60));
        console.log('üóëÔ∏è √âV√âNEMENT : SUPPRESSION D\'UTILISATEUR');
        console.log('='.repeat(60));
        console.log(`üë§ Utilisateur supprim√©: ${data.userId}`);
        await this.stopUserTasks(data.userId);
        console.log('‚úÖ Toutes les t√¢ches de cet utilisateur ont √©t√© supprim√©es');
        console.log('='.repeat(60));
    }

    /**
     * Gestionnaire de red√©marrage du planificateur
     */
    async handleSchedulerRestart() {
        console.log('\n' + '='.repeat(60));
        console.log('üîÑ √âV√âNEMENT : RED√âMARRAGE DU PLANIFICATEUR');
        console.log('='.repeat(60));
        console.log('üõë Arr√™t en cours...');
        await this.stop();
        console.log('üöÄ Red√©marrage...');
        await this.start();
        console.log('‚úÖ Red√©marrage termin√©');
        console.log('='.repeat(60));
    }

    /**
     * Arr√™te toutes les t√¢ches d'un utilisateur sp√©cifique
     */
    async stopUserTasks(userId) {
        console.log(`   üîç Recherche des t√¢ches pour l'utilisateur ${userId}...`);
        
        const userJobs = Array.from(this.jobs.keys()).filter(jobId => jobId.startsWith(`${userId}-`));
        
        if (userJobs.length === 0) {
            console.log(`   ‚ÑπÔ∏è Aucune t√¢che trouv√©e pour cet utilisateur`);
            return;
        }
        
        console.log(`   üìã ${userJobs.length} t√¢ches trouv√©es:`);
        
        for (const jobId of userJobs) {
            const job = this.jobs.get(jobId);
            if (job) {
                job.stop();
                this.jobs.delete(jobId);
                console.log(`   ‚ùå Arr√™t√©e: ${jobId}`);
            }
        }
        
        console.log(`   ‚úÖ ${userJobs.length} t√¢ches arr√™t√©es pour l'utilisateur ${userId}`);
    }

    async start() {
        if (this.isStarted) {
            console.log('‚ö†Ô∏è Le planificateur est d√©j√† d√©marr√©');
            return;
        }

        console.log('\nüöÄ D√©marrage du planificateur de notifications...');
        console.log('üéØ AVEC SYST√àME DE MISE √Ä JOUR TEMPS R√âEL ACTIV√â');
        console.log('üåü NOUVEAU: SYST√àME R√âACTIF INT√âGR√â');

        try {
            // R√©cup√©rer tous les utilisateurs avec leurs pr√©f√©rences
            const users = await this.prisma.user.findMany({
                include: {
                    notificationSettings: true
                }
            });

            console.log(`üìä Utilisateurs trouv√©s : ${users.length}`);

            for (const user of users) {
                if (!user.notificationSettings) {
                    console.log(`‚ö†Ô∏è Pas de pr√©f√©rences pour ${user.email}`);
                    continue;
                }

                const settings = user.notificationSettings;
                NotificationLogger.logNotificationSettings(settings);

                if (!settings.isEnabled) {
                    console.log(`‚ùå Notifications d√©sactiv√©es pour ${user.email}`);
                    continue;
                }

                // Planifier les notifications pour chaque utilisateur
                await this.scheduleUserNotifications(user.id, settings);
            }
            
            // Planifier le traitement des notifications
            this.scheduleNotificationProcessing();
            
            // Planifier le nettoyage des anciennes notifications
            this.scheduleCleanup();

            this.isStarted = true;
            
            // D√©marrer le syst√®me r√©actif apr√®s la configuration de base
            console.log('\nüåü D√©marrage du syst√®me r√©actif avanc√©...');
            await this.reactiveManager.start();
            
            console.log('‚úÖ Planificateur d√©marr√© avec succ√®s');
            console.log('üéØ Pr√™t √† recevoir les mises √† jour de pr√©f√©rences en temps r√©el !');
            console.log('üåü Syst√®me r√©actif op√©rationnel - d√©tection automatique des changements !');
        }
        catch (error) {
            NotificationLogger.logError('D√©marrage du planificateur', error);
            throw error;
        }
    }

    async scheduleUserNotifications(userId, settings) {
        try {
            console.log(`   üìã Configuration des notifications pour ${userId}:`);
            console.log(`      üîî Activ√©es: ${settings.isEnabled ? '‚úÖ' : '‚ùå'}`);
            console.log(`      üåÖ Matin: ${settings.morningTime}`);
            console.log(`      ‚òÄÔ∏è Midi: ${settings.noonTime}`);
            console.log(`      üå§Ô∏è Apr√®s-midi: ${settings.afternoonTime}`);
            console.log(`      üåÜ Soir: ${settings.eveningTime}`);
            console.log(`      üåô Nuit: ${settings.nightTime}`);
            
            const { morningTime, noonTime, afternoonTime, eveningTime, nightTime } = settings;

            // Validation des horaires pour √©viter les doublons
            const times = [morningTime, noonTime, afternoonTime, eveningTime, nightTime];
            const uniqueTimes = [...new Set(times)];
            
            if (times.length !== uniqueTimes.length) {
                console.log(`   ‚ö†Ô∏è ATTENTION: Horaires identiques d√©tect√©s !`);
                console.log(`   üìã Horaires: ${times.join(', ')}`);
                console.log(`   üîÑ Seuls les horaires uniques seront planifi√©s`);
            }

            // V√©rifier si les horaires sont dans le futur proche (√©viter cascade)
            const now = new Date();
            const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
            
            console.log(`   üïê Heure actuelle: ${currentTime}`);
            
            const timesToSchedule = [];
            
            // Notification du matin
            if (settings.morningReminder && this.isValidSchedulingTime(morningTime, currentTime)) {
                timesToSchedule.push({time: morningTime, type: 'matin', callback: async (date) => await this.notificationService.scheduleMorningNotification(userId, date)});
            }

            // Notification du midi
            if (this.isValidSchedulingTime(noonTime, currentTime)) {
                timesToSchedule.push({time: noonTime, type: 'midi', callback: async (date) => await this.notificationService.scheduleNoonNotification(userId, date)});
            }

            // Notification de l'apr√®s-midi
            if (this.isValidSchedulingTime(afternoonTime, currentTime)) {
                timesToSchedule.push({time: afternoonTime, type: 'apr√®s-midi', callback: async (date) => await this.notificationService.scheduleAfternoonNotification(userId, date)});
            }

            // Notification du soir
            if (this.isValidSchedulingTime(eveningTime, currentTime)) {
                timesToSchedule.push({time: eveningTime, type: 'soir', callback: async (date) => await this.notificationService.scheduleEveningNotification(userId, date)});
            }

            // Notification de nuit
            if (this.isValidSchedulingTime(nightTime, currentTime)) {
                timesToSchedule.push({time: nightTime, type: 'nuit', callback: async (date) => await this.notificationService.scheduleNightNotification(userId, date)});
            }

            // Planifier seulement les horaires valides et uniques
            const uniqueTimesToSchedule = timesToSchedule.filter((item, index, self) => 
                index === self.findIndex(t => t.time === item.time)
            );

            console.log(`   üìÖ ${uniqueTimesToSchedule.length} horaires uniques seront planifi√©s`);

            for (const item of uniqueTimesToSchedule) {
                this.scheduleDailyNotification(userId, item.time, item.callback);
            }

            console.log(`   ‚úÖ Toutes les notifications planifi√©es pour l'utilisateur ${userId}`);
        }
        catch (error) {
            console.log(`   ‚ùå Erreur lors de la planification pour ${userId}:`, error.message);
            NotificationLogger.logError(`Planification des notifications pour l'utilisateur ${userId}`, error);
        }
    }

    /**
     * V√©rifie si un horaire est valide pour planification (pas trop proche du moment actuel)
     */
    isValidSchedulingTime(scheduleTime, currentTime) {
        const [scheduleHour, scheduleMin] = scheduleTime.split(':').map(Number);
        const [currentHour, currentMin] = currentTime.split(':').map(Number);
        
        const scheduleMinutes = scheduleHour * 60 + scheduleMin;
        const currentMinutes = currentHour * 60 + currentMin;
        
        // Si l'horaire est dans moins de 2 minutes, on consid√®re que c'est trop proche
        const minuteDiff = scheduleMinutes - currentMinutes;
        
        if (minuteDiff >= 0 && minuteDiff < 2) {
            console.log(`   ‚ö†Ô∏è Horaire ${scheduleTime} trop proche (dans ${minuteDiff}min) - ignor√©`);
            return false;
        }
        
        return true;
    }

    scheduleDailyNotification(userId, time, callback) {
        const [hours, minutes] = time.split(':').map(Number);
        const cronExpression = `${minutes} ${hours} * * *`;

        if (!cron.validate(cronExpression)) {
            console.log(`   ‚ùå Expression cron invalide: ${cronExpression}`);
            NotificationLogger.logError('Validation de l\'expression cron', new Error(`Expression cron invalide : ${cronExpression}`));
            return;
        }

        const job = cron.schedule(cronExpression, async () => {
            try {
                const now = new Date();
                await callback(now);
            }
            catch (error) {
                NotificationLogger.logError('Ex√©cution de la t√¢che planifi√©e', error);
            }
        });

        const jobId = `${userId}-${time}`;
        this.jobs.set(jobId, job);
        console.log(`   ‚ûï Nouvelle t√¢che: ${jobId} (${cronExpression})`);
    }

    scheduleNotificationProcessing() {
        // V√©rifier et traiter les notifications toutes les minutes
        const job = cron.schedule('* * * * *', async () => {
            try {
                await this.processNotifications();
            }
            catch (error) {
                NotificationLogger.logError('Traitement des notifications', error);
            }
        });
        this.jobs.set('processNotifications', job);
        console.log('üîÑ T√¢che de traitement des notifications planifi√©e (toutes les minutes)');
    }

    async processNotifications() {
        try {
            const now = new Date();
            const fiveMinutesAgo = new Date(now.getTime() - 5 * 60 * 1000);
            const twoMinutesInFuture = new Date(now.getTime() + 2 * 60 * 1000);

            // R√©cup√©rer les notifications en attente qui doivent √™tre envoy√©es
            const pendingNotifications = await this.prisma.notificationHistory.findMany({
                where: {
                    status: 'pending',
                    scheduledFor: {
                        gte: fiveMinutesAgo,
                        lte: twoMinutesInFuture
                    }
                },
                include: {
                    user: {
                        include: {
                            notificationSettings: true
                        }
                    }
                }
            });

            if (pendingNotifications.length > 0) {
                console.log(`üîÑ Traitement de ${pendingNotifications.length} notifications...`);
                
                for (const notification of pendingNotifications) {
                    try {
                        await this.notificationService.processNotification(notification);
                    }
                    catch (error) {
                        NotificationLogger.logError(`Traitement de la notification ${notification.id}`, error);
                    }
                }
            }
        }
        catch (error) {
            NotificationLogger.logError('Processus de v√©rification des notifications', error);
        }
    }

    scheduleCleanup() {
        // Nettoyer les notifications plus vieilles que 7 jours √† minuit
        const job = cron.schedule('0 0 * * *', async () => {
            try {
                const sevenDaysAgo = new Date();
                sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
                const result = await this.prisma.notificationHistory.deleteMany({
                    where: {
                        scheduledFor: {
                            lt: sevenDaysAgo
                        }
                    }
                });
                console.log(`üßπ Nettoyage des notifications :`);
                console.log(`   ${result.count} notifications supprim√©es`);
            }
            catch (error) {
                NotificationLogger.logError('Nettoyage des notifications', error);
            }
        });
        this.jobs.set('cleanup', job);
        console.log('üßπ T√¢che de nettoyage planifi√©e');
    }

    stop() {
        console.log('\nüõë Arr√™t du planificateur...');
        
        // Arr√™ter le syst√®me r√©actif d'abord
        if (this.reactiveManager) {
            console.log('üåü Arr√™t du syst√®me r√©actif...');
            this.reactiveManager.stop();
        }
        
        this.jobs.forEach((job, id) => {
            job.stop();
            console.log(`   T√¢che arr√™t√©e : ${id}`);
        });
        this.jobs.clear();
        this.isStarted = false;
        console.log('‚úÖ Planificateur arr√™t√©\n');
    }

    /**
     * Met √† jour le planning d'un utilisateur sp√©cifique
     */
    async updateUserSchedule(userId) {
        try {
            console.log(`üîÑ Mise √† jour du planning pour l'utilisateur ${userId}`);
            
            // R√©cup√©rer les nouvelles pr√©f√©rences
            const user = await this.prisma.user.findUnique({
                where: { id: userId },
                include: { notificationSettings: true }
            });
            
            if (!user || !user.notificationSettings) {
                console.log(`‚ö†Ô∏è Utilisateur ou pr√©f√©rences non trouv√©s pour ${userId}`);
                return;
            }
            
            // Arr√™ter les anciennes t√¢ches
            await this.stopUserTasks(userId);
            
            // Replanifier si activ√©
            if (user.notificationSettings.isEnabled) {
                await this.scheduleUserNotifications(userId, user.notificationSettings);
                console.log(`‚úÖ Planning mis √† jour pour ${userId}`);
            } else {
                console.log(`‚ùå Notifications d√©sactiv√©es pour ${userId}`);
            }
        } catch (error) {
            NotificationLogger.logError(`Mise √† jour du planning pour ${userId}`, error);
        }
    }

    /**
     * Retourne le statut du planificateur
     */
    getStatus() {
        return {
            isStarted: this.isStarted,
            activeJobs: this.jobs.size,
            realtimeUpdates: true,
            eventListeners: true,
            reactiveSystem: this.reactiveManager ? this.reactiveManager.getSystemStatus() : null,
            jobs: Array.from(this.jobs.keys())
        };
    }
}

export default NotificationScheduler;
