import { fileURLToPath } from 'url';
import { dirname, resolve } from 'path';
import { existsSync } from 'fs';
import { config } from 'dotenv';

// Configuration de dotenv avec le chemin correct
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
// Charger .env par d√©faut
config();

// Charger .env.local si pr√©sent (ne pas √©craser les variables d√©j√† d√©finies)
const envLocalPath = resolve(process.cwd(), '.env.local');
if (existsSync(envLocalPath)) {
    config({ path: envLocalPath });
}

import { PrismaClient } from '@prisma/client';
import { AIService } from './AIService';
import { WhatsAppService } from './WhatsAppService';
import { VoiceTranscriptionService } from './VoiceTranscriptionService';
import express, { Request, Response } from 'express';
import { generateApiToken } from '../../../lib/api-token.ts';

const app = express();
// En prod (Railway), utiliser PORT. En local, AI_PORT (ou 3001)
const port = Number(process.env.PORT || process.env.AI_PORT || '3001');

async function startAIService() {
    const prisma = new PrismaClient();
    const aiService = new AIService();
    const whatsappService = new WhatsAppService();
    const voiceService = new VoiceTranscriptionService();

    // Helper: get or create API token with journaling scopes
    async function getOrCreateApiTokenForUser(userId: string): Promise<string> {
        const required = ['deepwork:read', 'deepwork:write', 'tasks:read', 'tasks:write', 'journal:read', 'journal:write']
        const existing = await prisma.apiToken.findFirst({
            where: { userId, scopes: { hasEvery: required } },
            orderBy: { createdAt: 'desc' }
        })
        if (existing?.token) return existing.token
        const { token } = await generateApiToken({ name: 'Agent IA (Deep Work + Journal)', userId, scopes: required })
        return token
    }

    try {
        console.log('üöÄ D√©marrage du service IA...');

        // Connexion √† la base de donn√©es
        await prisma.$connect();
        console.log('‚úÖ Connect√© √† la base de donn√©es');

        // Configuration du serveur Express
        app.use(express.json());
        
        // Middleware pour logger toutes les requ√™tes
        app.use((req, res, next) => {
            console.log(`${req.method} ${req.path}`, {
                headers: req.headers,
                query: req.query,
                body: req.body
            });
            next();
        });

        // Route de healthcheck
        app.get('/health', (_req: Request, res: Response) => {
            res.status(200).json({ status: 'ok' });
        });

        // Route pour la v√©rification du webhook WhatsApp
        app.get('/webhook', (req: Request, res: Response) => {
            console.log('Requ√™te de v√©rification du webhook re√ßue:', req.query);
            
            const mode = req.query['hub.mode'];
            const token = req.query['hub.verify_token'];
            const challenge = req.query['hub.challenge'];

            if (mode === 'subscribe' && token === process.env.WHATSAPP_VERIFY_TOKEN && challenge) {
                console.log('Webhook v√©rifi√© !');
                res.status(200).send(challenge);
            } else {
                console.error('√âchec de la v√©rification du webhook');
                console.error('Token attendu:', process.env.WHATSAPP_VERIFY_TOKEN);
                console.error('Token re√ßu:', token);
                res.sendStatus(403);
            }
        });

        // Route pour recevoir les messages WhatsApp
        app.post('/webhook', async (req: Request, res: Response) => {
            console.log('üì© Requ√™te webhook POST re√ßue:', JSON.stringify(req.body, null, 2));
            
            try {
                // V√©rification de la structure de base
                if (!req.body || !req.body.object) {
                    console.log('‚ùå Corps de requ√™te invalide ou manquant');
                    return res.sendStatus(400);
                }

                if (req.body.object === 'whatsapp_business_account') {
                    const webhookData = req.body.entry?.[0]?.changes?.[0]?.value;
                    
                    // üõ°Ô∏è FILTRAGE DES WEBHOOKS DE STATUT (delivered, read, etc.)
                    if (webhookData?.statuses) {
                        console.log('‚ÑπÔ∏è Webhook de statut ignor√© (delivered/read/etc.):', JSON.stringify(req.body, null, 2));
                        return res.sendStatus(200);
                    }
                    
                    // V√©rification de la pr√©sence des messages
                    if (!webhookData?.messages) {
                        console.log('‚ÑπÔ∏è Requ√™te WhatsApp re√ßue mais pas de message:', JSON.stringify(req.body, null, 2));
                        return res.sendStatus(200);
                    }

                    const message = req.body.entry[0].changes[0].value.messages[0];
                    if (!message) {
                        console.log('‚ùå Structure de message invalide');
                        return res.sendStatus(200);
                    }

                    const from = message.from;
                    const messageType = message.type;

                    console.log('üì± Message re√ßu de', from, '- Type:', messageType);

                    let textToProcess = '';
                    let userIdForToken: string | null = null;

                    if (messageType === 'text') {
                        // Message texte classique
                        textToProcess = message.text?.body || '';
                        console.log('üìù Texte:', textToProcess);

                        // Commandes journaling (r√©sum√© / conseils)
                        try {
                            const lowerCmd = (textToProcess || '').toLowerCase();
                            const phone = String(from).replace(/\D/g, '');
                            const user = await prisma.user.findFirst({ where: { whatsappNumber: { equals: phone } } });
                            if (user?.id) {
                                const apiToken = await getOrCreateApiTokenForUser(user.id);
                                const appUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';

                                // R√©sum√© des 7 derniers jours
                                if ((lowerCmd.includes('r√©sum√©') || lowerCmd.includes('resume')) && lowerCmd.includes('journal')) {
                                    const resp = await fetch(`${appUrl}/api/journal/agent?days=7`, {
                                        headers: { 'Authorization': `Bearer ${apiToken}` }
                                    });
                                    const data = await resp.json().catch(() => ({}));
                                    const entries = Array.isArray(data.entries) ? data.entries : [];
                                    if (entries.length === 0) {
                                        await whatsappService.sendMessage(from, "üìî Tu n'as pas encore d'entr√©es de journal.\n\nEnvoie-moi un vocal ce soir pour commencer ! üéôÔ∏è");
                                    } else {
                                        let msg = `üìä **Tes 7 derniers jours**\n\n`;
                                        entries.forEach((entry: any) => {
                                            const date = new Date(entry.date).toLocaleDateString('fr-FR', { weekday: 'short', day: 'numeric', month: 'short' });
                                            const emoji = entry.sentiment === 'positive' ? 'üòä' : entry.sentiment === 'negative' ? 'üòî' : 'üòê';
                                            msg += `${emoji} **${date}**\n`;
                                            if (entry.highlights?.length > 0) msg += `‚ú® ${entry.highlights[0]}\n`;
                                            msg += `\n`;
                                        });
                                        await whatsappService.sendMessage(from, msg);
                                    }
                                    return res.sendStatus(200);
                                }

                                // Conseils du jour
                                if (lowerCmd.includes('conseil')) {
                                    const resp = await fetch(`${appUrl}/api/journal/insights`, {
                                        headers: { 'Authorization': `Bearer ${apiToken}` }
                                    });
                                    const data = await resp.json().catch(() => ({}));
                                    const insight = data.insight;
                                    if (!insight || !Array.isArray(insight.recommendations) || insight.recommendations.length === 0) {
                                        await whatsappService.sendMessage(from, "üí° Continue √† noter tes journ√©es pendant quelques jours, je pourrai ensuite te donner des conseils personnalis√©s ! üìà");
                                    } else {
                                        let messageOut = `üåÖ **Tes axes d'am√©lioration**\n\n`;
                                        if (Array.isArray(insight.focusAreas) && insight.focusAreas.length > 0) {
                                            messageOut += `üéØ **Concentre-toi sur :**\n`;
                                            for (const area of insight.focusAreas) messageOut += `‚Ä¢ ${area}\n`;
                                            messageOut += `\n`;
                                        }
                                        messageOut += `üí° **Mes recommandations :**\n`;
                                        insight.recommendations.forEach((rec: string, idx: number) => { messageOut += `${idx + 1}. ${rec}\n`; });
                                        await whatsappService.sendMessage(from, messageOut);
                                    }
                                    return res.sendStatus(200);
                                }
                            }
                        } catch (e) {
                            console.error('Erreur commandes journaling (texte):', e);
                        }

                        // D√©clencheur explicite pour le journal (sans impacter les autres fonctionnalit√©s)
                        const lower = (textToProcess || '').toLowerCase();
                        const journalTriggers = [
                            'note de sa journ√©e',
                            'note de ma journ√©e',
                            'journal de ma journ√©e',
                            'journal de sa journ√©e',
                            'journal de la journ√©e',
                            'journal de journ√©e',
                            'journal journ√©e',
                            'habitude note de sa journ√©e',
                            'habitude note de ma journ√©e'
                        ];
                        const hasJournalTrigger = journalTriggers.some(t => lower.includes(t));

                        if (hasJournalTrigger) {
                            try {
                                const phone = String(from).replace(/\D/g, '');
                                const user = await prisma.user.findFirst({ where: { whatsappNumber: { equals: phone } } });
                                if (user?.id) {
                                    const apiToken = await getOrCreateApiTokenForUser(user.id);
                                    const appUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
                                    const payload = { transcription: textToProcess, date: new Date().toISOString() };
                                    console.log('üìî Journaling (text) POST', { appUrl, path: '/api/journal/agent' });
                                    const resp = await fetch(`${appUrl}/api/journal/agent`, {
                                        method: 'POST',
                                        headers: {
                                            'Authorization': `Bearer ${apiToken}`,
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify(payload)
                                    });
                                    const text = await resp.text();
                                    console.log('üìî Journaling (text) response', { status: resp.status, textLength: text.length });

                                    await whatsappService.sendMessage(
                                        from,
                                        "üìî Journal not√©. Je l'analyse et te donnerai des insights demain matin üåÖ\n\nTu peux aussi √©crire 'r√©sum√© journal' ou 'conseils du jour'."
                                    );
                                    return res.sendStatus(200);
                                }
                            } catch (e) {
                                console.error('Erreur journal via texte:', e);
                            }
                        }
                    } else if (messageType === 'audio') {
                        // Message vocal - transcription n√©cessaire
                        console.log('üéôÔ∏è Message vocal d√©tect√©');
                        const audioId = message.audio?.id;

                        if (audioId) {
                            console.log('üéµ ID du fichier audio:', audioId);
                            
                            // Transcrire le message vocal
                            const transcriptionResult = await voiceService.processVoiceMessage(
                                audioId, 
                                process.env.WHATSAPP_ACCESS_TOKEN!
                            );

                            if (transcriptionResult.success) {
                                textToProcess = transcriptionResult.text;
                                console.log('‚úÖ Transcription r√©ussie:', textToProcess);
                                
                                // Envoyer un accus√© de r√©ception de la transcription
                                await whatsappService.sendMessage(
                                    from, 
                                    `üéôÔ∏è *Message vocal re√ßu et transcrit :*\n\n"${textToProcess}"\n\n_Traitement en cours..._`
                                );

                                // Tenter d'associer l'utilisateur par num√©ro WhatsApp
                                const phone = String(from).replace(/\D/g, '');
                                const user = await prisma.user.findFirst({ where: { whatsappNumber: { equals: phone } } });
                                if (user?.id) {
                                    userIdForToken = user.id;
                                    try {
                                        const apiToken = await getOrCreateApiTokenForUser(user.id);
                                        const appUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
                                        const payload = {
                                            transcription: textToProcess,
                                            date: new Date().toISOString()
                                        };
                                        console.log('üìî Journaling (audio) POST', { appUrl, path: '/api/journal/agent' });
                                        const resp = await fetch(`${appUrl}/api/journal/agent`, {
                                            method: 'POST',
                                            headers: {
                                                'Authorization': `Bearer ${apiToken}`,
                                                'Content-Type': 'application/json'
                                            },
                                            body: JSON.stringify(payload)
                                        });
                                        const text = await resp.text();
                                        console.log('üìî Journaling (audio) response', { status: resp.status, textLength: text.length });
                                    } catch (e) {
                                        console.error('Erreur envoi au journal agent (audio):', e);
                                    }
                                }
                            } else {
                                console.error('‚ùå Erreur de transcription:', transcriptionResult.error);
                                await whatsappService.sendMessage(
                                    from, 
                                    '‚ùå D√©sol√©, je n\'ai pas pu transcrire votre message vocal. Pouvez-vous r√©√©ssayer ou envoyer un message texte ?'
                                );
                                return res.sendStatus(200);
                            }
                        } else {
                            console.error('‚ùå ID audio manquant');
                            await whatsappService.sendMessage(
                                from, 
                                '‚ùå Erreur lors de la r√©ception du message vocal. Veuillez r√©essayer.'
                            );
                            return res.sendStatus(200);
                        }
                    } else {
                        console.log('‚ÑπÔ∏è Type de message non support√©:', messageType);
                        await whatsappService.sendMessage(
                            from, 
                            'Je ne peux traiter que les messages texte et vocaux pour le moment. üòä'
                        );
                        return res.sendStatus(200);
                    }

                    // Traiter le texte (qu'il soit direct ou transcrit)
                    if (textToProcess.trim()) {
                        const response = await aiService.processMessage(from, textToProcess);
                        console.log('ü§ñ R√©ponse de l\'IA:', response);

                        if (response && response.response) {
                            await whatsappService.sendMessage(from, response.response);
                            console.log('‚úÖ R√©ponse envoy√©e avec succ√®s');
                        }
                    }

                    res.sendStatus(200);
                } else {
                    console.log('‚ùå Objet non reconnu:', req.body.object);
                    res.sendStatus(404);
                }
            } catch (error: unknown) {
                console.error('‚ùå Erreur lors du traitement du webhook:', error);
                res.sendStatus(500);
            }
        });

        // D√©marrer le serveur
        app.listen(port, () => {
            console.log(`‚ú® Service IA d√©marr√© sur le port ${port}`);
        });

        // G√©rer l'arr√™t gracieux
        process.on('SIGTERM', async () => {
            console.log('\nüì¥ Signal d\'arr√™t re√ßu...');
            await prisma.$disconnect();
            process.exit(0);
        });

        process.on('SIGINT', async () => {
            console.log('\nüì¥ Signal d\'interruption re√ßu...');
            await prisma.$disconnect();
            process.exit(0);
        });

    } catch (error: unknown) {
        console.error('‚ùå Erreur lors du d√©marrage du service:', error);
        await prisma.$disconnect();
        process.exit(1);
    }
}

startAIService(); 