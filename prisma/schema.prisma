generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

model User {
  id               String        @id @default(cuid())
  name             String?
  email            String        @unique
  password         String
  role             UserRole      @default(USER)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  habits           Habit[]
  missions         Mission[]
  processes        Process[]
  projects         Project[]
  sessions         Session[]
  tasks            Task[]
  timeEntries      TimeEntry[]
  warMapEvents     WarMapEvent[]
  companies        UserCompany[] // Relation avec les entreprises
  managedCompany   Company?      @relation("CompanyAdmin", fields: [managedCompanyId], references: [id])
  managedCompanyId String?
  apiTokens        ApiToken[] // Tokens API pour agents IA
  
  // Relations de gamification
  gamification     UserGamification?
  notificationSettings NotificationSettings?

  // Champs Stripe
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?   @unique
  subscriptionStatus   String?
  trialEndsAt          DateTime?
}

model Company {
  id             String        @id @default(cuid())
  name           String
  description    String?
  logo           String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  users          UserCompany[] // Relation avec les utilisateurs
  administrators User[]        @relation("CompanyAdmin")
}

model UserCompany {
  id        String   @id @default(cuid())
  userId    String
  companyId String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@index([userId])
  @@index([companyId])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id           String        @id @default(cuid())
  name         String
  description  String?
  color        String?
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  tasks        Task[]
  timeEntries  TimeEntry[]
  warMapEvents WarMapEvent[]
}

model Process {
  id          String   @id @default(cuid())
  name        String
  description String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]   @relation("TaskProcess")

  @@index([userId])
}

model Task {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  title        String
  description  String?
  dueDate      DateTime?
  userId       String
  projectId    String?
  completed    Boolean     @default(false)
  order        Int         @default(500)
  scheduledFor DateTime?
  processId    String?
  priority     Int?
  energyLevel  Int?
  process      Process?    @relation("TaskProcess", fields: [processId], references: [id])
  project      Project?    @relation(fields: [projectId], references: [id])
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeEntries  TimeEntry[]

  @@index([userId])
  @@index([projectId])
  @@index([processId])
}

model TimeEntry {
  id          String    @id @default(cuid())
  startTime   DateTime
  endTime     DateTime?
  userId      String
  taskId      String?
  projectId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  description String?
  project     Project?  @relation(fields: [projectId], references: [id])
  task        Task?     @relation(fields: [taskId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([taskId])
  @@index([projectId])
}

model Habit {
  id          String       @id @default(cuid())
  name        String       @db.VarChar(255)
  description String?      @db.Text
  color       String?      @db.VarChar(7) // Format hexadécimal: #RRGGBB
  frequency   String       @db.VarChar(10) // 'daily', 'weekly', 'monthly'
  daysOfWeek  String[]     @default([]) // ["monday", "wednesday", "friday"]
  userId      String
  order       Int          @default(0) // Nouvel attribut pour l'ordre d'affichage
  user        User         @relation(fields: [userId], references: [id])
  entries     HabitEntry[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@map("habits")
}

model HabitEntry {
  id        String   @id @default(cuid())
  habitId   String
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  date      DateTime @db.Date
  completed Boolean  @default(false)
  note      String?  @db.Text
  rating    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([habitId, date])
  @@index([habitId])
  @@index([date])
  @@map("habit_entries")
}

model Mission {
  id         String      @id @default(cuid())
  title      String
  quarter    Int
  year       Int
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  current    Float       @default(0)
  progress   Float       @default(0)
  target     Float       @default(100)
  user       User        @relation(fields: [userId], references: [id])
  objectives Objective[]

  @@unique([userId, quarter, year])
}

model Objective {
  id        String            @id @default(cuid())
  title     String
  missionId String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  current   Float             @default(0)
  target    Float             @default(100)
  progress  Float             @default(0)
  mission   Mission           @relation(fields: [missionId], references: [id])
  actions   ObjectiveAction[]
}

model ObjectiveAction {
  id          String      @id @default(cuid())
  title       String
  objectiveId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  progress    Float       @default(0)
  current     Float       @default(0)
  target      Float       @default(100)
  initiative  Initiative?
  objective   Objective   @relation(fields: [objectiveId], references: [id])
}

model Initiative {
  id                String          @id @default(cuid())
  title             String
  description       String?
  objectiveActionId String          @unique
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  objectiveAction   ObjectiveAction @relation(fields: [objectiveActionId], references: [id])
}

model WarMapEvent {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  userId      String
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  color       String?
  project     Project? @relation(fields: [projectId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model ApiToken {
  id          String    @id @default(cuid())
  name        String    @db.VarChar(255)
  token       String    @unique
  userId      String
  description String?   @db.Text
  scopes      String[]  @default([]) // Permissions: ["habits:read", "habits:write", "tasks:read", etc.]
  lastUsed    DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("api_tokens")
}

// Modèles de gamification
model UserGamification {
  id                String   @id @default(cuid())
  userId            String   @unique
  totalPoints       Int      @default(0)
  level             Int      @default(1)
  currentStreak     Int      @default(0)
  longestStreak     Int      @default(0)
  totalHabitsCompleted Int   @default(0)
  weeklyGoal        Int      @default(7) // Objectif d'habitudes par semaine
  monthlyGoal       Int      @default(30) // Objectif d'habitudes par mois
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievements      UserAchievement[]
  streakHistory     StreakHistory[]

  @@map("user_gamification")
}

model Achievement {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  description String   @db.Text
  icon        String   @db.VarChar(50) // Nom de l'icône (ex: "trophy", "fire", "star")
  category    String   @db.VarChar(50) // "streak", "completion", "consistency", "milestone"
  condition   String   @db.Text // Condition JSON pour débloquer l'achievement
  points      Int      @default(0) // Points accordés pour cet achievement
  rarity      String   @db.VarChar(20) @default("common") // "common", "rare", "epic", "legendary"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  user          UserGamification @relation(fields: [userId], references: [userId], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model StreakHistory {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @db.Date
  streakCount Int
  habitsCompleted Int @default(0)
  totalHabitsForDay Int @default(0)
  createdAt DateTime @default(now())
  user      UserGamification @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId])
  @@index([date])
  @@map("streak_history")
}

model NotificationSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique
  streakReminders       Boolean  @default(true)
  achievementNotifications Boolean @default(true)
  dailyMotivation       Boolean  @default(true)
  weeklyProgress        Boolean  @default(true)
  pushEnabled           Boolean  @default(false)
  emailEnabled          Boolean  @default(true)
  reminderTime          String   @default("09:00") // Format HH:MM
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model WaitlistEntry {
  id          String   @id @default(cuid())
  email       String   @unique
  phone       String?
  motivation  String?  @db.Text
  status      String   @default("pas_paye") // "pas_paye", "paye"
  currentStep Int      @default(1) // 1: email, 2: phone+motivation, 3: paiement
  stripeSessionId String? // ID de session Stripe pour le paiement
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("waitlist_entries")
}
