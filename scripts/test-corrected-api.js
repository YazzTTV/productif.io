const jwt = require('jsonwebtoken');

// Configuration avec le bon port
const API_BASE = 'http://localhost:3001';
const JWT_SECRET = 'un_secret_tres_securise_pour_jwt_tokens';

// Token permanent cr√©√© par le script pr√©c√©dent
const PERMANENT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbklkIjoiMDAzYzcwZDRjOWFiYmM1ZmUwZmVjYjg2OTcyNTQ5ZmQiLCJ1c2VySWQiOiJjbWE2bDkxbHkwMDAwOWJlMTkwaWJ5bGhjIiwic2NvcGVzIjpbInRhc2tzOnJlYWQiLCJ0YXNrczp3cml0ZSIsImhhYml0czpyZWFkIiwiaGFiaXRzOndyaXRlIl19.amSmhfK9vEMtxFA_3JQ8LBzXC7vFAI-FfPfwVYYRsVQ';

async function testCorrectedAPI() {
  console.log('üß™ === TEST TOKEN PERMANENT CORRIG√â ===\n');

  try {
    // Analyser le token
    const decoded = jwt.verify(PERMANENT_TOKEN, JWT_SECRET);
    console.log('üîç ANALYSE DU TOKEN:');
    console.log(`   ‚úÖ Valide: OUI`);
    console.log(`   ‚úÖ User ID: ${decoded.userId}`);
    console.log(`   ‚úÖ Scopes: ${decoded.scopes.join(', ')}`);
    console.log(`   ‚úÖ Expiration: ${decoded.exp ? 'OUI' : 'AUCUNE (PERMANENT)'}`);
    
    // V√©rifier le header
    const header = JSON.parse(Buffer.from(PERMANENT_TOKEN.split('.')[0], 'base64').toString());
    console.log(`   ‚úÖ Header type: ${header.typ || 'MANQUANT'}`);
    console.log(`   ‚úÖ Algorithme: ${header.alg}`);
    console.log();

    // Tester les APIs
    const apiHeaders = {
      'Authorization': `Bearer ${PERMANENT_TOKEN}`,
      'Content-Type': 'application/json'
    };

    console.log('üåê TEST DES APIS:');
    
    // Test 1: API auth info
    console.log('   üîç Test auth info...');
    try {
      const authResponse = await fetch(`${API_BASE}/api/debug/auth-info`, { headers: apiHeaders });
      if (authResponse.ok) {
        const authInfo = await authResponse.json();
        console.log(`   ‚úÖ Auth OK - Email: ${authInfo.userEmail}`);
      } else {
        console.log(`   ‚ùå Auth √©chec: ${authResponse.status}`);
      }
    } catch (e) {
      console.log(`   ‚ùå Auth erreur: ${e.message}`);
    }

    // Test 2: API tasks
    console.log('   üìã Test tasks...');
    try {
      const tasksResponse = await fetch(`${API_BASE}/api/tasks/agent`, { headers: apiHeaders });
      if (tasksResponse.ok) {
        const tasks = await tasksResponse.json();
        console.log(`   ‚úÖ Tasks OK - ${tasks.length} t√¢ches r√©cup√©r√©es`);
      } else {
        console.log(`   ‚ùå Tasks √©chec: ${tasksResponse.status}`);
      }
    } catch (e) {
      console.log(`   ‚ùå Tasks erreur: ${e.message}`);
    }

    // Test 3: Cr√©er une t√¢che
    console.log('   ‚ûï Test cr√©ation t√¢che...');
    try {
      const createTaskResponse = await fetch(`${API_BASE}/api/tasks/agent`, {
        method: 'POST',
        headers: apiHeaders,
        body: JSON.stringify({
          title: 'T√¢che cr√©√©e avec token permanent',
          description: 'Test de validation des corrections',
          priority: 'MEDIUM'
        })
      });
      
      if (createTaskResponse.ok) {
        const newTask = await createTaskResponse.json();
        console.log(`   ‚úÖ Cr√©ation OK - ID: ${newTask.id}`);
      } else {
        console.log(`   ‚ùå Cr√©ation √©chec: ${createTaskResponse.status}`);
      }
    } catch (e) {
      console.log(`   ‚ùå Cr√©ation erreur: ${e.message}`);
    }

    console.log('\nüéâ === R√âSULTATS FINAUX ===');
    console.log('‚úÖ Token permanent fonctionnel');
    console.log('‚úÖ APIs accessibles avec le token');
    console.log('‚úÖ Plus de probl√®me d\'expiration');
    console.log('‚úÖ Interface web corrig√©e pour cr√©er des tokens permanents');
    
    console.log('\nüîß CORRECTIONS APPLIQU√âES:');
    console.log('1. ‚úÖ lib/jwt.ts - Option noExpiration ajout√©e');
    console.log('2. ‚úÖ lib/api-token.ts - Utilisation de noExpiration quand pas d\'expiresAt');
    console.log('3. ‚úÖ Headers JWT conformes avec "typ": "JWT"');
    console.log('4. ‚úÖ Expiration par d√©faut pass√©e de 7j √† 1 an');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

testCorrectedAPI(); 