const jwt = require('jsonwebtoken');

// Configuration
const API_BASE = 'http://localhost:3001';
const JWT_SECRET = 'un_secret_tres_securise_pour_jwt_tokens';

// Token cr√©√© par l'utilisateur via l'interface web
const USER_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbklkIjoiYWFmNjc5ZWYzNWRlNzJiOTViN2QwMDdlZDVjYWE4MTciLCJ1c2VySWQiOiJjbWE2bGkzajEwMDBjYTY0c2lzamJqeWZzIiwic2NvcGVzIjpbInRhc2tzOnJlYWQiLCJoYWJpdHM6cmVhZCIsInByb2plY3RzOnJlYWQiLCJvYmplY3RpdmVzOnJlYWQiLCJwcm9jZXNzZXM6cmVhZCIsInByb2Nlc3Nlczp3cml0ZSIsIm9iamVjdGl2ZXM6d3JpdGUiLCJ0YXNrczp3cml0ZSIsImhhYml0czp3cml0ZSIsInByb2plY3RzOndyaXRlIl19.JM0xZftVtVE1YxjytuqXGOzmdm2Ti39_MAQ07aBqGjI';

async function analyzeUserToken() {
  console.log('üîç === ANALYSE DU TOKEN UTILISATEUR ===\n');

  try {
    // 1. Analyser le token JWT
    console.log('üìä ANALYSE JWT:');
    const decoded = jwt.verify(USER_TOKEN, JWT_SECRET);
    
    console.log(`   ‚úÖ Token valide: OUI`);
    console.log(`   ‚úÖ User ID: ${decoded.userId}`);
    console.log(`   ‚úÖ Token ID: ${decoded.tokenId}`);
    console.log(`   ‚úÖ Scopes (${decoded.scopes.length}): ${decoded.scopes.join(', ')}`);
    console.log(`   ‚úÖ Expiration: ${decoded.exp ? `Le ${new Date(decoded.exp * 1000).toISOString()}` : 'AUCUNE (PERMANENT) üéâ'}`);
    
    if (decoded.iat) {
      console.log(`   ‚úÖ Cr√©√© le: ${new Date(decoded.iat * 1000).toISOString()}`);
    }

    // 2. V√©rifier le header
    const header = JSON.parse(Buffer.from(USER_TOKEN.split('.')[0], 'base64').toString());
    console.log(`   ‚úÖ Header type: ${header.typ} ${header.typ === 'JWT' ? '‚úÖ' : '‚ùå'}`);
    console.log(`   ‚úÖ Algorithme: ${header.alg}`);

    console.log('\nüß™ TESTS FONCTIONNELS:');

    const apiHeaders = {
      'Authorization': `Bearer ${USER_TOKEN}`,
      'Content-Type': 'application/json'
    };

    // Test 1: Auth info
    console.log('   üîç Test authentification...');
    try {
      const authResponse = await fetch(`${API_BASE}/api/debug/auth-info`, { headers: apiHeaders });
      if (authResponse.ok) {
        const authInfo = await authResponse.json();
        console.log(`   ‚úÖ Auth r√©ussie - Email: ${authInfo.userEmail}`);
        console.log(`   ‚úÖ User ID correspond: ${authInfo.userId === decoded.userId ? 'OUI' : 'NON'}`);
      } else {
        console.log(`   ‚ùå Auth √©chou√©e: ${authResponse.status}`);
      }
    } catch (e) {
      console.log(`   ‚ùå Erreur auth: ${e.message}`);
    }

    // Test 2: Lire les t√¢ches
    console.log('   üìã Test lecture t√¢ches...');
    try {
      const tasksResponse = await fetch(`${API_BASE}/api/tasks/agent`, { headers: apiHeaders });
      if (tasksResponse.ok) {
        const tasks = await tasksResponse.json();
        console.log(`   ‚úÖ Lecture t√¢ches r√©ussie - ${tasks.length} t√¢ches trouv√©es`);
      } else {
        console.log(`   ‚ùå Lecture t√¢ches √©chou√©e: ${tasksResponse.status}`);
      }
    } catch (e) {
      console.log(`   ‚ùå Erreur lecture t√¢ches: ${e.message}`);
    }

    // Test 3: Cr√©er une t√¢che (si scope write disponible)
    if (decoded.scopes.includes('tasks:write')) {
      console.log('   ‚ûï Test cr√©ation t√¢che...');
      try {
        const createResponse = await fetch(`${API_BASE}/api/tasks/agent`, {
          method: 'POST',
          headers: apiHeaders,
          body: JSON.stringify({
            title: 'Test token interface web',
            description: 'T√¢che cr√©√©e pour tester le token',
            priority: 'MEDIUM'
          })
        });
        
        if (createResponse.ok) {
          const newTask = await createResponse.json();
          console.log(`   ‚úÖ Cr√©ation t√¢che r√©ussie - ID: ${newTask.id}`);
        } else {
          console.log(`   ‚ùå Cr√©ation t√¢che √©chou√©e: ${createResponse.status}`);
        }
      } catch (e) {
        console.log(`   ‚ùå Erreur cr√©ation t√¢che: ${e.message}`);
      }
    }

    // Test 4: Lire les projets
    if (decoded.scopes.includes('projects:read')) {
      console.log('   üìÅ Test lecture projets...');
      try {
        const projectsResponse = await fetch(`${API_BASE}/api/projects/agent`, { headers: apiHeaders });
        if (projectsResponse.ok) {
          const projects = await projectsResponse.json();
          console.log(`   ‚úÖ Lecture projets r√©ussie - ${projects.length} projets trouv√©s`);
        } else {
          console.log(`   ‚ùå Lecture projets √©chou√©e: ${projectsResponse.status}`);
        }
      } catch (e) {
        console.log(`   ‚ùå Erreur lecture projets: ${e.message}`);
      }
    }

    console.log('\nüéâ === R√âSULTAT FINAL ===');
    console.log('‚úÖ Token cr√©√© via interface web');
    console.log(`‚úÖ Token ${decoded.exp ? 'avec expiration' : 'PERMANENT'}`);
    console.log('‚úÖ Headers JWT corrects');
    console.log('‚úÖ Scopes complets (lecture et √©criture)');
    console.log('‚úÖ APIs fonctionnelles');
    console.log('\nüéØ CORRECTION VALID√âE: L\'interface web cr√©e maintenant des tokens permanents et fonctionnels !');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse:', error);
    if (error.name === 'JsonWebTokenError') {
      console.error('   Le token n\'est pas valide ou la signature ne correspond pas');
    } else if (error.name === 'TokenExpiredError') {
      console.error('   Le token a expir√©');
    }
  }
}

analyzeUserToken(); 