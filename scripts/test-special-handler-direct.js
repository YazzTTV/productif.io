import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testSpecialHandlerDirect() {
    console.log('üîç Test direct du SpecialHabitsHandler');
    console.log('=' * 50);
    
    const userId = 'cma6li3j1000ca64sisjbjyfs';  // Le vrai ID utilisateur
    const phoneNumber = '33783642205';
    
    try {
        // 1. V√©rifier que l'utilisateur et ses habitudes existent
        console.log('\n1Ô∏è‚É£ V√©rification des donn√©es utilisateur...');
        
        const user = await prisma.user.findUnique({
            where: { id: userId },
            select: { id: true, email: true, whatsappNumber: true }
        });
        
        if (!user) {
            console.log('‚ùå Utilisateur non trouv√© !');
            return;
        }
        console.log(`‚úÖ Utilisateur: ${user.email}`);
        
        const habits = await prisma.habit.findMany({
            where: { userId },
            select: { id: true, name: true }
        });
        
        console.log(`üìã ${habits.length} habitudes trouv√©es`);
        
        const noteJourneeHabit = habits.find(h => 
            h.name.toLowerCase().includes('note') && 
            h.name.toLowerCase().includes('journ√©e')
        );
        
        if (!noteJourneeHabit) {
            console.log('‚ùå Habitude "Note de sa journ√©e" non trouv√©e !');
            return;
        }
        
        console.log(`‚úÖ Habitude trouv√©e: "${noteJourneeHabit.name}" (${noteJourneeHabit.id})`);
        
        // 2. Tester la cr√©ation directe d'une entr√©e d'habitude
        console.log('\n2Ô∏è‚É£ Test de cr√©ation directe d\'entr√©e...');
        
        const today = new Date();
        const utcToday = new Date(Date.UTC(
            today.getFullYear(),
            today.getMonth(),
            today.getDate(),
            0, 0, 0, 0
        ));
        
        console.log(`üìÖ Date UTC: ${utcToday.toISOString()}`);
        
        // Supprimer l'entr√©e existante si elle existe
        const existingEntry = await prisma.habitEntry.findUnique({
            where: {
                habitId_date: {
                    habitId: noteJourneeHabit.id,
                    date: utcToday
                }
            }
        });
        
        if (existingEntry) {
            console.log('‚ö†Ô∏è Suppression de l\'entr√©e existante...');
            await prisma.habitEntry.delete({
                where: { id: existingEntry.id }
            });
        }
        
        // Cr√©er l'entr√©e avec les donn√©es enrichies
        const newEntry = await prisma.habitEntry.create({
            data: {
                habitId: noteJourneeHabit.id,
                date: utcToday,
                completed: true,
                note: 'Note: 9/10\n\nR√©sum√©: Test direct du handler',
                rating: 9
            }
        });
        
        console.log('‚úÖ Entr√©e cr√©√©e avec succ√®s !');
        console.log(`   ID: ${newEntry.id}`);
        console.log(`   Date: ${newEntry.date.toISOString()}`);
        console.log(`   Note: ${newEntry.rating}/10`);
        console.log(`   Contenu: "${newEntry.note}"`);
        
        // 3. V√©rifier que l'entr√©e est bien en base
        const verification = await prisma.habitEntry.findUnique({
            where: { id: newEntry.id },
            include: {
                habit: {
                    select: { name: true }
                }
            }
        });
        
        if (verification) {
            console.log('\n‚úÖ SUCC√àS TOTAL !');
            console.log(`   L'entr√©e existe bien en base`);
            console.log(`   Habitude: ${verification.habit.name}`);
            console.log(`   Date: ${verification.date.toLocaleDateString('fr-FR')}`);
            console.log(`   Note: ${verification.rating}/10`);
            console.log(`   Contenu: "${verification.note}"`);
        }
        
    } catch (error) {
        console.error('\n‚ùå ERREUR D√âTECT√âE:');
        console.error('Type:', error.constructor.name);
        console.error('Message:', error.message);
        if (error.code) {
            console.error('Code Prisma:', error.code);
        }
        console.error('Stack:', error.stack);
    } finally {
        await prisma.$disconnect();
    }
}

testSpecialHandlerDirect(); 