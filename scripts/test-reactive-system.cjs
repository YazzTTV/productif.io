const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testReactiveSystem() {
    console.log('üß™ TEST: Syst√®me R√©actif Complet');
    console.log('='.repeat(60));

    try {
        // Test 1: Cr√©er un utilisateur avec des pr√©f√©rences
        console.log('\nüìã Test 1: Cr√©ation d\'un utilisateur avec pr√©f√©rences...');
        
        const testUser = await prisma.user.create({
            data: {
                email: `test-reactive-${Date.now()}@example.com`,
                name: 'Test Reactive User',
                password: 'fake-password',
                notificationSettings: {
                    create: {
                        isEnabled: true,
                        morningTime: '08:30',
                        noonTime: '12:30',
                        afternoonTime: '15:30',
                        eveningTime: '18:30',
                        nightTime: '21:30',
                        whatsappEnabled: true,
                        whatsappNumber: '+33612345678'
                    }
                }
            },
            include: {
                notificationSettings: true
            }
        });

        console.log(`‚úÖ Utilisateur cr√©√©: ${testUser.email}`);
        console.log(`üìù ID: ${testUser.id}`);
        
        // Attendre un peu pour que le syst√®me r√©actif d√©tecte le changement
        console.log('\n‚è≥ Attente de 8 secondes pour la d√©tection automatique...');
        await sleep(8000);

        // Test 2: Modifier les pr√©f√©rences
        console.log('\nüìã Test 2: Modification des pr√©f√©rences...');
        
        const updatedSettings = await prisma.notificationSettings.update({
            where: { userId: testUser.id },
            data: {
                morningTime: '09:00',
                noonTime: '13:00',
                isEnabled: false
            }
        });

        console.log('‚úÖ Pr√©f√©rences modifi√©es');
        console.log(`üåÖ Nouveau matin: ${updatedSettings.morningTime}`);
        console.log(`‚òÄÔ∏è Nouveau midi: ${updatedSettings.noonTime}`);
        console.log(`üîî Notifications: ${updatedSettings.isEnabled ? 'Activ√©es' : 'D√©sactiv√©es'}`);

        // Attendre la d√©tection
        console.log('\n‚è≥ Attente de 8 secondes pour la d√©tection de modification...');
        await sleep(8000);

        // Test 3: R√©activer les notifications
        console.log('\nüìã Test 3: R√©activation des notifications...');
        
        await prisma.notificationSettings.update({
            where: { userId: testUser.id },
            data: {
                isEnabled: true,
                afternoonTime: '16:00',
                eveningTime: '19:00'
            }
        });

        console.log('‚úÖ Notifications r√©activ√©es avec nouveaux horaires');

        // Attendre la d√©tection
        console.log('\n‚è≥ Attente de 8 secondes pour la d√©tection de r√©activation...');
        await sleep(8000);

        // Test 4: Suppression de l'utilisateur
        console.log('\nüìã Test 4: Suppression de l\'utilisateur...');
        
        await prisma.user.delete({
            where: { id: testUser.id }
        });

        console.log('‚úÖ Utilisateur supprim√©');

        // Attendre la d√©tection
        console.log('\n‚è≥ Attente de 8 secondes pour la d√©tection de suppression...');
        await sleep(8000);

        console.log('\nüéâ TESTS TERMIN√âS !');
        console.log('‚ïê'.repeat(60));
        console.log('üìä R√©sultats attendus:');
        console.log('   1. ‚úÖ D√©tection de cr√©ation d\'utilisateur');
        console.log('   2. ‚úÖ D√©tection de modification de pr√©f√©rences');
        console.log('   3. ‚úÖ D√©tection de d√©sactivation/r√©activation');
        console.log('   4. ‚úÖ D√©tection de suppression d\'utilisateur');
        console.log('');
        console.log('üí° V√©rifiez les logs du scheduler pour voir les r√©actions automatiques !');

    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    } finally {
        await prisma.$disconnect();
    }
}

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Ex√©cuter le test
testReactiveSystem(); 