import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function checkScheduleTiming() {
  try {
    const user = await prisma.user.findFirst({
      where: {
        whatsappNumber: { contains: '33783642205' }
      }
    })

    if (!user) {
      console.log('‚ùå Utilisateur non trouv√©')
      process.exit(1)
    }

    const schedule = await prisma.checkInSchedule.findUnique({
      where: { userId: user.id }
    })

    if (!schedule) {
      console.log('‚ùå Schedule non configur√©')
      process.exit(1)
    }

    console.log('üìÖ Configuration du Schedule:\n')
    console.log(`‚úÖ Activ√©: ${schedule.enabled ? 'OUI' : 'NON'}`)
    console.log(`üîÑ Fr√©quence: ${schedule.frequency}`)
    console.log(`üé≤ Randomisation: ${schedule.randomize ? 'ACTIV√âE (¬±15min)' : 'D√âSACTIV√âE'}`)
    console.log(`üìÖ Week-ends: ${schedule.skipWeekends ? 'IGNOR√âS' : 'INCLUS'}`)
    console.log(`\n‚è∞ Horaires de check-ins:\n`)

    const schedules = schedule.schedules || []
    
    schedules.forEach((sched, idx) => {
      console.log(`${idx + 1}. üìç ${sched.time}`)
      console.log(`   Types: ${sched.types.join(', ')}`)
      
      if (schedule.randomize) {
        const [hour, minute] = sched.time.split(':').map(Number)
        const minTime = new Date()
        minTime.setHours(hour, Math.max(0, minute - 15), 0, 0)
        const maxTime = new Date()
        maxTime.setHours(hour, Math.min(59, minute + 15), 0, 0)
        
        console.log(`   ‚è∞ Envoi entre: ${minTime.getHours()}:${String(minTime.getMinutes()).padStart(2, '0')} et ${maxTime.getHours()}:${String(maxTime.getMinutes()).padStart(2, '0')}`)
      } else {
        console.log(`   ‚è∞ Envoi √†: ${sched.time} exactement`)
      }
      console.log()
    })

    console.log('üí° Les questions sont envoy√©es automatiquement √† ces horaires')
    console.log('üì± Vous recevrez une question al√©atoire parmi les types configur√©s')

    process.exit(0)
  } catch (error) {
    console.error('‚ùå Erreur:', error)
    process.exit(1)
  }
}

checkScheduleTiming()
