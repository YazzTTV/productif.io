#!/bin/bash

echo "üîç V√©rification pr√©-d√©ploiement Railway"
echo "======================================"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Compteurs
CHECKS_PASSED=0
CHECKS_TOTAL=0

check_file() {
    CHECKS_TOTAL=$((CHECKS_TOTAL + 1))
    if [ -f "$1" ]; then
        echo -e "${GREEN}‚úÖ${NC} $1 existe"
        CHECKS_PASSED=$((CHECKS_PASSED + 1))
    else
        echo -e "${RED}‚ùå${NC} $1 manquant"
    fi
}

check_command() {
    CHECKS_TOTAL=$((CHECKS_TOTAL + 1))
    if command -v "$1" &> /dev/null; then
        echo -e "${GREEN}‚úÖ${NC} $1 install√©"
        CHECKS_PASSED=$((CHECKS_PASSED + 1))
    else
        echo -e "${RED}‚ùå${NC} $1 non install√©"
    fi
}

check_env_example() {
    CHECKS_TOTAL=$((CHECKS_TOTAL + 1))
    if grep -q "$1" env.example 2>/dev/null || grep -q "$1" .env.example 2>/dev/null; then
        echo -e "${GREEN}‚úÖ${NC} Variable $1 document√©e"
        CHECKS_PASSED=$((CHECKS_PASSED + 1))
    else
        echo -e "${YELLOW}‚ö†Ô∏è${NC} Variable $1 non document√©e dans env.example"
    fi
}

echo "üìÅ V√©rification des fichiers..."
check_file "Dockerfile.ai"
check_file "Dockerfile.scheduler"
check_file "railway.toml"
check_file "railway.scheduler.toml"
check_file "src/services/ai/start.ts"
check_file "src/services/scheduler-service.js"
check_file "package.json"

echo ""
echo "üõ†Ô∏è V√©rification des outils..."
check_command "node"
check_command "pnpm"
check_command "git"

echo ""
echo "üìù V√©rification du package.json..."
CHECKS_TOTAL=$((CHECKS_TOTAL + 1))
if grep -q '"start:ai"' package.json; then
    echo -e "${GREEN}‚úÖ${NC} Script start:ai d√©fini"
    CHECKS_PASSED=$((CHECKS_PASSED + 1))
else
    echo -e "${RED}‚ùå${NC} Script start:ai manquant"
fi

CHECKS_TOTAL=$((CHECKS_TOTAL + 1))
if grep -q '"start:scheduler"' package.json; then
    echo -e "${GREEN}‚úÖ${NC} Script start:scheduler d√©fini"
    CHECKS_PASSED=$((CHECKS_PASSED + 1))
else
    echo -e "${RED}‚ùå${NC} Script start:scheduler manquant"
fi

echo ""
echo "üîê V√©rification des variables d'environnement..."
check_env_example "DATABASE_URL"
check_env_example "OPENAI_API_KEY"
check_env_example "WHATSAPP_ACCESS_TOKEN"
check_env_example "WHATSAPP_VERIFY_TOKEN"
check_env_example "WHATSAPP_PHONE_NUMBER_ID"

echo ""
echo "üê≥ V√©rification des Dockerfiles..."

# V√©rifier les ports dans les Dockerfiles
CHECKS_TOTAL=$((CHECKS_TOTAL + 1))
if grep -q "EXPOSE 3001" Dockerfile.ai; then
    echo -e "${GREEN}‚úÖ${NC} Port 3001 expos√© dans Dockerfile.ai"
    CHECKS_PASSED=$((CHECKS_PASSED + 1))
else
    echo -e "${RED}‚ùå${NC} Port incorrect dans Dockerfile.ai"
fi

CHECKS_TOTAL=$((CHECKS_TOTAL + 1))
if grep -q "EXPOSE 3002" Dockerfile.scheduler; then
    echo -e "${GREEN}‚úÖ${NC} Port 3002 expos√© dans Dockerfile.scheduler"
    CHECKS_PASSED=$((CHECKS_PASSED + 1))
else
    echo -e "${RED}‚ùå${NC} Port incorrect dans Dockerfile.scheduler"
fi

# V√©rifier les healthchecks
CHECKS_TOTAL=$((CHECKS_TOTAL + 1))
if grep -q "/health" Dockerfile.ai; then
    echo -e "${GREEN}‚úÖ${NC} Healthcheck configur√© dans Dockerfile.ai"
    CHECKS_PASSED=$((CHECKS_PASSED + 1))
else
    echo -e "${RED}‚ùå${NC} Healthcheck manquant dans Dockerfile.ai"
fi

CHECKS_TOTAL=$((CHECKS_TOTAL + 1))
if grep -q "/health" Dockerfile.scheduler; then
    echo -e "${GREEN}‚úÖ${NC} Healthcheck configur√© dans Dockerfile.scheduler"
    CHECKS_PASSED=$((CHECKS_PASSED + 1))
else
    echo -e "${RED}‚ùå${NC} Healthcheck manquant dans Dockerfile.scheduler"
fi

echo ""
echo "‚öôÔ∏è V√©rification des configurations Railway..."
CHECKS_TOTAL=$((CHECKS_TOTAL + 1))
if grep -q "Dockerfile.ai" railway.toml; then
    echo -e "${GREEN}‚úÖ${NC} railway.toml utilise Dockerfile.ai"
    CHECKS_PASSED=$((CHECKS_PASSED + 1))
else
    echo -e "${RED}‚ùå${NC} railway.toml ne pointe pas vers Dockerfile.ai"
fi

CHECKS_TOTAL=$((CHECKS_TOTAL + 1))
if grep -q "Dockerfile.scheduler" railway.scheduler.toml; then
    echo -e "${GREEN}‚úÖ${NC} railway.scheduler.toml utilise Dockerfile.scheduler"
    CHECKS_PASSED=$((CHECKS_PASSED + 1))
else
    echo -e "${RED}‚ùå${NC} railway.scheduler.toml ne pointe pas vers Dockerfile.scheduler"
fi

echo ""
echo "üß™ Test des builds locaux..."
echo "V√©rification que les Dockerfiles peuvent √™tre build√©s..."

# Test de build Docker (si Docker est install√© et en marche)
if command -v docker &> /dev/null; then
    if docker info &> /dev/null; then
        echo "üê≥ Docker d√©tect√© et en marche - Test de build..."
        
        # Test Dockerfile.ai
        if docker build -f Dockerfile.ai -t test-ai . &> /dev/null; then
            echo -e "${GREEN}‚úÖ${NC} Dockerfile.ai peut √™tre build√©"
            docker rmi test-ai &> /dev/null
            CHECKS_PASSED=$((CHECKS_PASSED + 1))
        else
            echo -e "${RED}‚ùå${NC} Erreur de build Dockerfile.ai"
        fi
        CHECKS_TOTAL=$((CHECKS_TOTAL + 1))
        
        # Test Dockerfile.scheduler
        if docker build -f Dockerfile.scheduler -t test-scheduler . &> /dev/null; then
            echo -e "${GREEN}‚úÖ${NC} Dockerfile.scheduler peut √™tre build√©"
            docker rmi test-scheduler &> /dev/null
            CHECKS_PASSED=$((CHECKS_PASSED + 1))
        else
            echo -e "${RED}‚ùå${NC} Erreur de build Dockerfile.scheduler"
        fi
        CHECKS_TOTAL=$((CHECKS_TOTAL + 1))
    else
        echo -e "${YELLOW}‚ö†Ô∏è${NC} Docker install√© mais non d√©marr√© - builds ignorer pour le moment"
        echo -e "${GREEN}‚ÑπÔ∏è${NC} Les builds seront test√©s sur Railway lors du d√©ploiement"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è${NC} Docker non install√© - impossible de tester les builds"
    echo -e "${GREEN}‚ÑπÔ∏è${NC} Les builds seront test√©s sur Railway lors du d√©ploiement"
fi

echo ""
echo "üìä R√©sultats de la v√©rification"
echo "==============================="
echo -e "Tests r√©ussis: ${GREEN}$CHECKS_PASSED${NC}/$CHECKS_TOTAL"

PERCENTAGE=$((CHECKS_PASSED * 100 / CHECKS_TOTAL))

if [ $PERCENTAGE -eq 100 ]; then
    echo -e "${GREEN}üéâ Tous les tests sont pass√©s ! Pr√™t pour le d√©ploiement.${NC}"
    echo ""
    echo "üöÄ √âtapes suivantes :"
    echo "1. git add . && git commit -m 'Ready for Railway deployment'"
    echo "2. git push"
    echo "3. Suivez le guide docs/DEPLOIEMENT_RAILWAY.md"
    exit 0
elif [ $PERCENTAGE -ge 80 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è $PERCENTAGE% des tests pass√©s. D√©ploiement possible avec attention.${NC}"
    exit 1
else
    echo -e "${RED}‚ùå Seulement $PERCENTAGE% des tests pass√©s. Corrigez les erreurs avant le d√©ploiement.${NC}"
    exit 2
fi 