import { NextResponse } from 'next/server';
import { cookies } from 'next/headers';
import { verifyToken } from '@/lib/auth';
import { PrismaClient } from '@prisma/client';
import { whatsappService } from '@/lib/whatsapp';

const prisma = new PrismaClient();

export async function POST(req: Request) {
    try {
        // R√©cup√©rer le token depuis les cookies de mani√®re asynchrone
        const cookieStore = await cookies();
        const token = cookieStore.get("auth_token")?.value;

        if (!token) {
            return NextResponse.json({ error: 'Non autoris√©' }, { status: 401 });
        }

        // V√©rifier le token
        const payload = await verifyToken(token);
        if (!payload) {
            return NextResponse.json({ error: 'Token invalide' }, { status: 401 });
        }

        // R√©cup√©rer l'ID utilisateur du corps de la requ√™te
        const { userId } = await req.json();

        if (!userId) {
            return NextResponse.json({ error: 'userId est requis' }, { status: 400 });
        }

        // V√©rifier que l'utilisateur envoie un test pour ses propres notifications
        if (userId !== payload.userId) {
            return NextResponse.json({ error: 'Non autoris√©' }, { status: 403 });
        }

        console.log('üîç Recherche des pr√©f√©rences pour l\'utilisateur:', userId);

        // R√©cup√©rer les pr√©f√©rences de l'utilisateur
        const preferences = await prisma.notificationSettings.findUnique({
            where: { userId }
        });

        if (!preferences) {
            console.log('‚ùå Aucune pr√©f√©rence trouv√©e pour l\'utilisateur:', userId);
            return NextResponse.json({ error: 'Pr√©f√©rences non trouv√©es' }, { status: 404 });
        }

        console.log('‚úÖ Pr√©f√©rences trouv√©es:', {
            whatsappEnabled: preferences.whatsappEnabled,
            whatsappNumber: preferences.whatsappNumber,
        });

        if (!preferences.whatsappEnabled || !preferences.whatsappNumber) {
            console.log('‚ùå WhatsApp non configur√© correctement:', {
                enabled: preferences.whatsappEnabled,
                number: preferences.whatsappNumber,
            });
            return NextResponse.json({ 
                error: 'WhatsApp n\'est pas activ√© ou aucun num√©ro n\'est configur√©' 
            }, { status: 400 });
        }

        // Envoyer un message de test via WhatsApp
        const message = "üîî Ceci est un message de test de Productif.io ! Si vous recevez ce message, vos notifications WhatsApp sont correctement configur√©es.";
        
        console.log('üì± Tentative d\'envoi du message WhatsApp √†:', preferences.whatsappNumber);
        
        const result = await whatsappService.sendMessage(preferences.whatsappNumber, message);
        console.log('‚úÖ R√©ponse de l\'API WhatsApp:', result);

        return NextResponse.json({ 
            success: true,
            message: 'Notification de test envoy√©e',
            whatsappResponse: result
        });
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'envoi de la notification de test:', error);
        return NextResponse.json({ 
            error: 'Erreur lors de l\'envoi du test',
            details: error instanceof Error ? error.message : 'Erreur inconnue'
        }, { status: 500 });
    }
} 