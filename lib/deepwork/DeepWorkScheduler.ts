import { prisma } from '@/lib/prisma'
import { whatsappService } from '@/lib/whatsapp'

export class DeepWorkScheduler {
  private checkInterval: NodeJS.Timeout | null = null
  private readonly CHECK_FREQUENCY_MS = 2 * 60 * 1000

  start() {
    if (this.checkInterval) {
      console.warn('DeepWorkScheduler d√©j√† d√©marr√©')
      return
    }
    this.checkInterval = setInterval(() => {
      this.checkSessions().catch((error) => {
        console.error('Erreur dans checkSessions:', error)
      })
    }, this.CHECK_FREQUENCY_MS)

    console.log('‚úÖ DeepWorkScheduler d√©marr√© (v√©rification toutes les 2min)')
    this.checkSessions().catch(console.error)
  }

  stop() {
    if (this.checkInterval) {
      clearInterval(this.checkInterval)
      this.checkInterval = null
      console.log('‚èπÔ∏è DeepWorkScheduler arr√™t√©')
    }
  }

  private async checkSessions() {
    try {
      const now = new Date()
      const activeSessions = await prisma.deepWorkSession.findMany({
        where: { status: 'active' },
        include: {
          user: { select: { id: true, whatsappNumber: true, notificationSettings: true } },
          timeEntry: true
        }
      })

      console.log(`üîç V√©rification de ${activeSessions.length} session(s) active(s)`) 

      for (const session of activeSessions) {
        const elapsed = Math.floor((now.getTime() - session.timeEntry.startTime.getTime()) / 60000)
        const remainingMinutes = session.plannedDuration - elapsed

        if (remainingMinutes <= 0) {
          console.log(`‚è∞ Session ${session.id} termin√©e (${elapsed}min √©coul√©es)`) 
          await this.completeSession(session)
        } else if (remainingMinutes === 5) {
          await this.sendReminder(session, remainingMinutes)
        }
      }
    } catch (error) {
      console.error('‚ùå Erreur v√©rification sessions Deep Work:', error)
    }
  }

  private async completeSession(session: any) {
    try {
      const now = new Date()
      const duration = Math.floor((now.getTime() - session.timeEntry.startTime.getTime()) / 60000)

      await prisma.deepWorkSession.update({ where: { id: session.id }, data: { status: 'completed' } })
      await prisma.timeEntry.update({ where: { id: session.timeEntry.id }, data: { endTime: now } })

      console.log(`‚úÖ Session ${session.id} termin√©e automatiquement (${duration}min)`) 
      await this.sendCompletionNotification(session, duration)
    } catch (error) {
      console.error(`‚ùå Erreur completion session ${session.id}:`, error)
    }
  }

  private async sendCompletionNotification(session: any, actualDuration: number) {
    try {
      const prefs = session.user.notificationSettings
      const phone = session.user.whatsappNumber || prefs?.whatsappNumber
      if (!prefs?.whatsappEnabled || !phone) return

      const onTime = actualDuration <= session.plannedDuration + 2
      let message = `‚úÖ *Session Deep Work termin√©e !*\n\n`
      message += `‚è±Ô∏è Dur√©e pr√©vue : ${session.plannedDuration} minutes\n`
      message += `‚è±Ô∏è Dur√©e r√©elle : ${actualDuration} minutes\n\n`
      message += onTime ? `üéâ Parfait ! Tu as respect√© ton temps pr√©vu !\n\n` : `‚ö†Ô∏è Tu as d√©pass√© de ${actualDuration - session.plannedDuration} minutes\n\n`
      message += `üí™ Excellent travail de concentration ! Continue comme √ßa !`

      await whatsappService.sendMessage(phone, message)
      console.log(`üì± Notification envoy√©e √† ${session.user.id}`)
    } catch (error) {
      console.error('‚ùå Erreur envoi notification completion:', error)
    }
  }

  private async sendReminder(session: any, minutesLeft: number) {
    try {
      const prefs = session.user.notificationSettings
      const phone = session.user.whatsappNumber || prefs?.whatsappNumber
      if (!prefs?.whatsappEnabled || !phone) return

      const message = `‚è∞ *Rappel Deep Work*\n\nPlus que ${minutesLeft} minutes sur ta session !\n\nüéØ Termine en beaut√© ! üí™`
      await whatsappService.sendMessage(phone, message)
      console.log(`üì± Rappel 5min envoy√© √† ${session.user.id}`)
    } catch (error) {
      console.error('‚ùå Erreur envoi rappel:', error)
    }
  }
}

export const deepWorkScheduler = new DeepWorkScheduler()


