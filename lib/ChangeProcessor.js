import { EventEmitter } from 'events';

/**
 * Change Processor - Traite les √©v√©nements de changement et d√©termine les actions
 * Pont intelligent entre DatabaseWatcher et le planificateur
 */
class ChangeProcessor extends EventEmitter {
    constructor() {
        super();
        this.processingQueue = [];
        this.isProcessing = false;
        console.log('‚öôÔ∏è ChangeProcessor initialis√©');
    }

    /**
     * D√©marre le processeur de changements
     */
    start() {
        console.log('üöÄ ChangeProcessor d√©marr√©');
        this.emit('processor_started');
    }

    /**
     * Traite un √©v√©nement de cr√©ation d'utilisateur
     */
    async handleUserCreated(eventData) {
        console.log('\n' + '='.repeat(80));
        console.log('üéØ TRAITEMENT: NOUVEL UTILISATEUR');
        console.log('='.repeat(80));
        console.log(`üë§ Utilisateur: ${eventData.email} (${eventData.userId})`);
        console.log(`‚è∞ Timestamp: ${eventData.timestamp}`);
        
        const action = this.analyzeNewUserAction(eventData);
        
        if (action.shouldAddToScheduler) {
            console.log('‚úÖ ACTION: Ajouter au planificateur');
            
            this.emit('SCHEDULER_ACTION', {
                type: 'ADD_USER',
                userId: eventData.userId,
                settings: eventData.settings,
                priority: 'HIGH',
                reason: 'Nouvel utilisateur avec notifications activ√©es'
            });
        } else {
            console.log('‚ÑπÔ∏è ACTION: Aucune action requise');
            console.log(`üìù Raison: ${action.reason}`);
        }
        
        console.log('='.repeat(80));
    }

    /**
     * Traite un √©v√©nement de modification de pr√©f√©rences
     */
    async handleUserUpdated(eventData) {
        console.log('\n' + '='.repeat(80));
        console.log('üîÑ TRAITEMENT: MODIFICATION UTILISATEUR');
        console.log('='.repeat(80));
        console.log(`üë§ Utilisateur: ${eventData.email} (${eventData.userId})`);
        console.log(`‚è∞ Timestamp: ${eventData.timestamp}`);
        
        // Afficher les changements d√©tect√©s
        console.log('üìã Changements d√©tect√©s:');
        for (const [field, change] of Object.entries(eventData.changes)) {
            console.log(`   ${this.getFieldEmoji(field)} ${this.getFieldLabel(field)}: ${change.from} ‚Üí ${change.to}`);
        }

        const action = this.analyzeUpdateAction(eventData);
        
        if (action.shouldUpdateScheduler) {
            console.log('‚úÖ ACTION: Mettre √† jour le planificateur');
            
            this.emit('SCHEDULER_ACTION', {
                type: 'UPDATE_USER',
                userId: eventData.userId,
                oldSettings: eventData.oldSettings,
                newSettings: eventData.newSettings,
                changes: eventData.changes,
                priority: action.priority,
                reason: action.reason
            });
        } else {
            console.log('‚ÑπÔ∏è ACTION: Aucune action requise');
            console.log(`üìù Raison: ${action.reason}`);
        }
        
        console.log('='.repeat(80));
    }

    /**
     * Traite un √©v√©nement de suppression d'utilisateur
     */
    async handleUserDeleted(eventData) {
        console.log('\n' + '='.repeat(80));
        console.log('üóëÔ∏è TRAITEMENT: SUPPRESSION UTILISATEUR');
        console.log('='.repeat(80));
        console.log(`üë§ Utilisateur: ${eventData.userId}`);
        console.log(`‚è∞ Timestamp: ${eventData.timestamp}`);
        
        console.log('‚úÖ ACTION: Supprimer du planificateur');
        
        this.emit('SCHEDULER_ACTION', {
            type: 'REMOVE_USER',
            userId: eventData.userId,
            priority: 'HIGH',
            reason: 'Utilisateur supprim√© de la base de donn√©es'
        });
        
        console.log('='.repeat(80));
    }

    /**
     * Analyse l'action √† prendre pour un nouvel utilisateur
     */
    analyzeNewUserAction(eventData) {
        const settings = eventData.settings;
        
        // V√©rifier si les notifications sont activ√©es
        if (!settings.isEnabled) {
            return {
                shouldAddToScheduler: false,
                reason: 'Notifications d√©sactiv√©es pour cet utilisateur'
            };
        }

        // V√©rifier si WhatsApp est configur√©
        if (!settings.whatsappEnabled || !settings.whatsappNumber) {
            return {
                shouldAddToScheduler: false,
                reason: 'WhatsApp non configur√©'
            };
        }

        // V√©rifier si les horaires sont valides
        const requiredTimes = ['morningTime', 'noonTime', 'afternoonTime', 'eveningTime', 'nightTime'];
        const missingTimes = requiredTimes.filter(time => !settings[time]);
        
        if (missingTimes.length > 0) {
            return {
                shouldAddToScheduler: false,
                reason: `Horaires manquants: ${missingTimes.join(', ')}`
            };
        }

        return {
            shouldAddToScheduler: true,
            reason: 'Utilisateur pr√™t pour la planification'
        };
    }

    /**
     * Analyse l'action √† prendre pour une modification
     */
    analyzeUpdateAction(eventData) {
        const changes = eventData.changes;
        const newSettings = eventData.newSettings;
        
        // V√©rifier si les notifications ont √©t√© d√©sactiv√©es
        if (changes.isEnabled && changes.isEnabled.to === false) {
            return {
                shouldUpdateScheduler: true,
                priority: 'HIGH',
                reason: 'Notifications d√©sactiv√©es - arr√™t du planning'
            };
        }

        // V√©rifier si les notifications ont √©t√© activ√©es
        if (changes.isEnabled && changes.isEnabled.to === true) {
            return {
                shouldUpdateScheduler: true,
                priority: 'HIGH',
                reason: 'Notifications activ√©es - d√©marrage du planning'
            };
        }

        // V√©rifier si WhatsApp a √©t√© modifi√©
        if (changes.whatsappEnabled || changes.whatsappNumber) {
            return {
                shouldUpdateScheduler: true,
                priority: 'MEDIUM',
                reason: 'Configuration WhatsApp modifi√©e'
            };
        }

        // V√©rifier si les horaires ont √©t√© modifi√©s
        const timeFields = ['morningTime', 'noonTime', 'afternoonTime', 'eveningTime', 'nightTime'];
        const timeChanges = timeFields.filter(field => changes[field]);
        
        if (timeChanges.length > 0) {
            return {
                shouldUpdateScheduler: true,
                priority: 'HIGH',
                reason: `Horaires modifi√©s: ${timeChanges.join(', ')}`
            };
        }

        // Si notifications actives, toujours mettre √† jour par s√©curit√©
        if (newSettings.isEnabled) {
            return {
                shouldUpdateScheduler: true,
                priority: 'LOW',
                reason: 'Mise √† jour pr√©ventive'
            };
        }

        return {
            shouldUpdateScheduler: false,
            reason: 'Aucun changement significatif d√©tect√©'
        };
    }

    /**
     * Obtient l'emoji correspondant au champ modifi√©
     */
    getFieldEmoji(field) {
        const emojis = {
            'isEnabled': 'üîî',
            'morningTime': 'üåÖ',
            'noonTime': '‚òÄÔ∏è',
            'afternoonTime': 'üå§Ô∏è',
            'eveningTime': 'üåÜ',
            'nightTime': 'üåô',
            'whatsappEnabled': 'üì±',
            'whatsappNumber': 'üìû'
        };
        return emojis[field] || 'üìù';
    }

    /**
     * Obtient le label lisible du champ
     */
    getFieldLabel(field) {
        const labels = {
            'isEnabled': 'Notifications',
            'morningTime': 'Matin',
            'noonTime': 'Midi',
            'afternoonTime': 'Apr√®s-midi',
            'eveningTime': 'Soir',
            'nightTime': 'Nuit',
            'whatsappEnabled': 'WhatsApp activ√©',
            'whatsappNumber': 'Num√©ro WhatsApp'
        };
        return labels[field] || field;
    }

    /**
     * Ajoute un √©v√©nement √† la queue de traitement
     */
    async queueEvent(eventType, eventData) {
        this.processingQueue.push({
            type: eventType,
            data: eventData,
            timestamp: new Date()
        });

        // Traiter imm√©diatement si pas en cours de traitement
        if (!this.isProcessing) {
            await this.processQueue();
        }
    }

    /**
     * Traite la queue d'√©v√©nements
     */
    async processQueue() {
        if (this.isProcessing || this.processingQueue.length === 0) {
            return;
        }

        this.isProcessing = true;

        while (this.processingQueue.length > 0) {
            const event = this.processingQueue.shift();
            
            try {
                switch (event.type) {
                    case 'USER_PREFERENCES_CREATED':
                        await this.handleUserCreated(event.data);
                        break;
                    case 'USER_PREFERENCES_UPDATED':
                        await this.handleUserUpdated(event.data);
                        break;
                    case 'USER_PREFERENCES_DELETED':
                    case 'USER_DELETED':
                        await this.handleUserDeleted(event.data);
                        break;
                    default:
                        console.log(`‚ö†Ô∏è Type d'√©v√©nement inconnu: ${event.type}`);
                }
            } catch (error) {
                console.error(`‚ùå Erreur lors du traitement de l'√©v√©nement ${event.type}:`, error);
            }
        }

        this.isProcessing = false;
    }

    /**
     * Obtient le statut du processeur
     */
    getStatus() {
        return {
            isProcessing: this.isProcessing,
            queueLength: this.processingQueue.length,
            startTime: this.startTime || null
        };
    }
}

export default ChangeProcessor; 