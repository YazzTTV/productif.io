import { EventEmitter } from 'events';

/**
 * Database Watcher - Surveille les changements dans la base de donn√©es
 * Sans modifier le fonctionnement existant du planificateur
 */
class DatabaseWatcher extends EventEmitter {
    constructor(prisma) {
        super();
        this.prisma = prisma;
        this.isWatching = false;
        this.watchInterval = null;
        this.lastCheckTimestamp = new Date();
        this.userPreferencesCache = new Map();
        
        console.log('üîç DatabaseWatcher initialis√©');
    }

    /**
     * D√©marre la surveillance des changements
     */
    async startWatching() {
        if (this.isWatching) {
            console.log('‚ö†Ô∏è DatabaseWatcher d√©j√† en cours d\'ex√©cution');
            return;
        }

        console.log('üéØ D√©marrage de la surveillance de la base de donn√©es...');
        
        // Initialiser le cache avec l'√©tat actuel
        await this.initializeCache();
        
        // D√©marrer la surveillance p√©riodique
        this.isWatching = true;
        this.watchInterval = setInterval(() => {
            this.checkForChanges();
        }, 5000); // V√©rification toutes les 5 secondes

        console.log('‚úÖ DatabaseWatcher d√©marr√© - surveillance active');
    }

    /**
     * Arr√™te la surveillance
     */
    stopWatching() {
        if (!this.isWatching) return;

        console.log('üõë Arr√™t de la surveillance de la base de donn√©es...');
        this.isWatching = false;
        
        if (this.watchInterval) {
            clearInterval(this.watchInterval);
            this.watchInterval = null;
        }

        console.log('‚úÖ DatabaseWatcher arr√™t√©');
    }

    /**
     * Initialise le cache avec l'√©tat actuel de la base de donn√©es
     */
    async initializeCache() {
        try {
            console.log('üîÑ Initialisation du cache DatabaseWatcher...');
            
            const users = await this.prisma.user.findMany({
                include: {
                    notificationSettings: true
                }
            });

            this.userPreferencesCache.clear();
            
            for (const user of users) {
                if (user.notificationSettings) {
                    this.userPreferencesCache.set(user.id, {
                        ...user.notificationSettings,
                        lastUpdated: user.notificationSettings.updatedAt
                    });
                }
            }

            console.log(`üìä Cache initialis√© avec ${this.userPreferencesCache.size} utilisateurs`);
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'initialisation du cache:', error);
        }
    }

    /**
     * V√©rifie les changements depuis la derni√®re v√©rification
     */
    async checkForChanges() {
        try {
            const currentTime = new Date();
            
            // R√©cup√©rer tous les utilisateurs avec leurs pr√©f√©rences
            const users = await this.prisma.user.findMany({
                include: {
                    notificationSettings: true
                },
                where: {
                    OR: [
                        {
                            notificationSettings: {
                                updatedAt: {
                                    gt: this.lastCheckTimestamp
                                }
                            }
                        },
                        {
                            createdAt: {
                                gt: this.lastCheckTimestamp
                            }
                        }
                    ]
                }
            });

            // Analyser les changements
            for (const user of users) {
                await this.analyzeUserChanges(user);
            }

            // V√©rifier les utilisateurs supprim√©s
            await this.checkForDeletedUsers();

            this.lastCheckTimestamp = currentTime;

        } catch (error) {
            console.error('‚ùå Erreur lors de la v√©rification des changements:', error);
        }
    }

    /**
     * Analyse les changements pour un utilisateur sp√©cifique
     */
    async analyzeUserChanges(user) {
        const userId = user.id;
        const currentSettings = user.notificationSettings;
        const cachedSettings = this.userPreferencesCache.get(userId);

        // Nouvel utilisateur avec des pr√©f√©rences
        if (!cachedSettings && currentSettings) {
            console.log(`üë§ NOUVEAU UTILISATEUR d√©tect√©: ${user.email}`);
            
            this.emit('USER_PREFERENCES_CREATED', {
                userId: userId,
                email: user.email,
                settings: currentSettings,
                timestamp: new Date()
            });

            // Mettre √† jour le cache
            this.userPreferencesCache.set(userId, {
                ...currentSettings,
                lastUpdated: currentSettings.updatedAt
            });
            return;
        }

        // Modifications des pr√©f√©rences existantes
        if (cachedSettings && currentSettings) {
            const hasChanged = currentSettings.updatedAt > cachedSettings.lastUpdated;
            
            if (hasChanged) {
                console.log(`üîÑ MODIFICATION des pr√©f√©rences d√©tect√©e pour: ${user.email}`);
                
                const changes = this.detectSpecificChanges(cachedSettings, currentSettings);
                
                this.emit('USER_PREFERENCES_UPDATED', {
                    userId: userId,
                    email: user.email,
                    oldSettings: cachedSettings,
                    newSettings: currentSettings,
                    changes: changes,
                    timestamp: new Date()
                });

                // Mettre √† jour le cache
                this.userPreferencesCache.set(userId, {
                    ...currentSettings,
                    lastUpdated: currentSettings.updatedAt
                });
            }
            return;
        }

        // Pr√©f√©rences supprim√©es
        if (cachedSettings && !currentSettings) {
            console.log(`üóëÔ∏è SUPPRESSION des pr√©f√©rences d√©tect√©e pour: ${user.email}`);
            
            this.emit('USER_PREFERENCES_DELETED', {
                userId: userId,
                email: user.email,
                timestamp: new Date()
            });

            this.userPreferencesCache.delete(userId);
        }
    }

    /**
     * D√©tecte les changements sp√©cifiques entre les anciennes et nouvelles pr√©f√©rences
     */
    detectSpecificChanges(oldSettings, newSettings) {
        const changes = {};
        
        const fieldsToWatch = [
            'isEnabled', 'morningTime', 'noonTime', 'afternoonTime', 
            'eveningTime', 'nightTime', 'whatsappEnabled', 'whatsappNumber'
        ];

        for (const field of fieldsToWatch) {
            if (oldSettings[field] !== newSettings[field]) {
                changes[field] = {
                    from: oldSettings[field],
                    to: newSettings[field]
                };
            }
        }

        return changes;
    }

    /**
     * V√©rifie les utilisateurs supprim√©s de la base de donn√©es
     */
    async checkForDeletedUsers() {
        try {
            const existingUserIds = await this.prisma.user.findMany({
                select: { id: true }
            });
            
            const existingIds = new Set(existingUserIds.map(u => u.id));
            
            // V√©rifier les utilisateurs dans le cache qui n'existent plus
            for (const [userId] of this.userPreferencesCache) {
                if (!existingIds.has(userId)) {
                    console.log(`üóëÔ∏è UTILISATEUR SUPPRIM√â d√©tect√©: ${userId}`);
                    
                    this.emit('USER_DELETED', {
                        userId: userId,
                        timestamp: new Date()
                    });

                    this.userPreferencesCache.delete(userId);
                }
            }
        } catch (error) {
            console.error('‚ùå Erreur lors de la v√©rification des utilisateurs supprim√©s:', error);
        }
    }

    /**
     * Force une v√©rification imm√©diate
     */
    async forceCheck() {
        console.log('‚ö° V√©rification forc√©e des changements...');
        await this.checkForChanges();
    }

    /**
     * Obtient le statut de la surveillance
     */
    getStatus() {
        return {
            isWatching: this.isWatching,
            cachedUsers: this.userPreferencesCache.size,
            lastCheck: this.lastCheckTimestamp,
            uptime: this.isWatching ? Date.now() - this.lastCheckTimestamp : 0
        };
    }
}

export default DatabaseWatcher; 